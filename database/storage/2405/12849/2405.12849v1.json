{"2405.12849": {"publish_time": "2024-05-21", "title": "Training and inference in the ReckON RSNN architecture implemented on a MPSoC", "paper_summary": "With the rise of artificial intelligence, biological neuron models are being\nused to implement neural networks that can learn certain tasks after a training\nphase. One type of such networks are spiking neural networks (SNNs) that rely\non a simplified model for biological neurons, the Integrate and Fire neuron.\nSeveral accelerators have emerged to implement SNNs with this kind of neuron.\nThe ReckON system is one of these that allows both the training and execution\nof a recurrent SNN. The ReckON architecture, implemented on a custom ASIC, can\nbe fully described using a hardware description language. In this work, we\nadapt the Verilog description to implement it on a Xilinx Multiprocessor System\non Chip system (MPSoC). We present the circuits required for the efficient\noperation of the system, and a Python framework to use it on the Pynq ZU\nplatform. We validate the architecture and implementation in two different\nscenarios, and show how the simulated accuracy is preserved with a peak\nperformance of 3.8M events processed per second.", "paper_summary_zh": "\u96a8\u8457\u4eba\u5de5\u667a\u6167\u7684\u5d1b\u8d77\uff0c\u751f\u7269\u795e\u7d93\u5143\u6a21\u578b\u88ab\u7528\u65bc\u5be6\u73fe\u795e\u7d93\u7db2\u8def\uff0c\u8b93\u5176\u5728\u8a13\u7df4\u968e\u6bb5\u5f8c\u80fd\u5920\u5b78\u7fd2\u7279\u5b9a\u4efb\u52d9\u3002\u5176\u4e2d\u4e00\u7a2e\u6b64\u985e\u7db2\u8def\u662f\u5c16\u5cf0\u795e\u7d93\u7db2\u8def (SNN)\uff0c\u5b83\u4f9d\u8cf4\u65bc\u751f\u7269\u795e\u7d93\u5143\u7684\u7c21\u5316\u6a21\u578b\uff0c\u5373\u7a4d\u5206\u8207\u767c\u5c04\u795e\u7d93\u5143\u3002\u5df2\u7d93\u51fa\u73fe\u4e86\u591a\u7a2e\u52a0\u901f\u5668\uff0c\u7528\u65bc\u4f7f\u7528\u9019\u7a2e\u795e\u7d93\u5143\u4f86\u5be6\u73fe SNN\u3002ReckON \u7cfb\u7d71\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\uff0c\u5b83\u5141\u8a31\u8a13\u7df4\u548c\u57f7\u884c\u905e\u8ff4 SNN\u3002ReckON \u67b6\u69cb\u5be6\u4f5c\u65bc\u5ba2\u88fd\u5316 ASIC \u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u786c\u9ad4\u63cf\u8ff0\u8a9e\u8a00\u5b8c\u6574\u63cf\u8ff0\u3002\u5728\u9019\u9805\u5de5\u4f5c\u4e2d\uff0c\u6211\u5011\u8abf\u6574\u4e86 Verilog \u63cf\u8ff0\uff0c\u4ee5\u4fbf\u5728 Xilinx \u591a\u8655\u7406\u5668\u7cfb\u7d71\u55ae\u6676\u7247\u7cfb\u7d71 (MPSoC) \u4e0a\u5be6\u73fe\u5b83\u3002\u6211\u5011\u5c55\u793a\u4e86\u7cfb\u7d71\u6709\u6548\u904b\u4f5c\u6240\u9700\u7684\u96fb\u8def\uff0c\u4ee5\u53ca\u4e00\u500b Python \u6846\u67b6\uff0c\u4ee5\u4fbf\u5728 Pynq ZU \u5e73\u53f0\u4e0a\u4f7f\u7528\u5b83\u3002\u6211\u5011\u5728\u5169\u7a2e\u4e0d\u540c\u7684\u60c5\u5883\u4e2d\u9a57\u8b49\u4e86\u67b6\u69cb\u548c\u5be6\u4f5c\uff0c\u4e26\u5c55\u793a\u4e86\u6a21\u64ec\u6e96\u78ba\u5ea6\u5982\u4f55\u4ee5\u6bcf\u79d2\u8655\u7406 380 \u842c\u500b\u4e8b\u4ef6\u7684\u5cf0\u503c\u6548\u80fd\u4fdd\u7559\u4e0b\u4f86\u3002", "author": "Alejandro Linares-Barranco et.al.", "authors": "Alejandro Linares-Barranco, Luciano Prono, Robert Lengenstein, Giacomo Indiveri, Charlotte Frenkel", "id": "2405.12849v1", "paper_url": "http://arxiv.org/abs/2405.12849v1", "repo": "null"}}