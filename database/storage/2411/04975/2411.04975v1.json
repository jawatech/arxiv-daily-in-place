{"2411.04975": {"publish_time": "2024-11-07", "title": "SuffixDecoding: A Model-Free Approach to Speeding Up Large Language Model Inference", "paper_summary": "We present SuffixDecoding, a novel model-free approach to accelerating large\nlanguage model (LLM) inference through speculative decoding. Unlike existing\nmethods that rely on draft models or specialized decoding heads, SuffixDecoding\nleverages suffix trees built from previously generated outputs to efficiently\npredict candidate token sequences. Our approach enables flexible\ntree-structured speculation without the overhead of maintaining and\norchestrating additional models. SuffixDecoding builds and dynamically updates\nsuffix trees to capture patterns in the generated text, using them to construct\nspeculation trees through a principled scoring mechanism based on empirical\ntoken frequencies. SuffixDecoding requires only CPU memory which is plentiful\nand underutilized on typical LLM serving nodes. We demonstrate that\nSuffixDecoding achieves competitive speedups compared to model-based approaches\nacross diverse workloads including open-domain chat, code generation, and\ntext-to-SQL tasks. For open-ended chat and code generation tasks,\nSuffixDecoding achieves up to $1.4\\times$ higher output throughput than\nSpecInfer and up to $1.1\\times$ lower time-per-token (TPOT) latency. For a\nproprietary multi-LLM text-to-SQL application, SuffixDecoding achieves up to\n$2.9\\times$ higher output throughput and $3\\times$ lower latency than\nspeculative decoding. Our evaluation shows that SuffixDecoding maintains high\nacceptance rates even with small reference corpora of 256 examples, while\ncontinuing to improve performance as more historical outputs are incorporated.", "paper_summary_zh": "<paragraph>\u6211\u5011\u63d0\u51fa SuffixDecoding\uff0c\u4e00\u7a2e\u65b0\u7a4e\u7684\u7121\u6a21\u578b\u65b9\u6cd5\uff0c\u901a\u904e\u63a8\u6e2c\u6027\u89e3\u78bc\u4f86\u52a0\u901f\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u63a8\u8ad6\u3002\u8207\u4f9d\u8cf4\u8349\u7a3f\u6a21\u578b\u6216\u7279\u5b9a\u89e3\u78bc\u982d\u7684\u73fe\u6709\u65b9\u6cd5\u4e0d\u540c\uff0cSuffixDecoding \u5229\u7528\u5f9e\u5148\u524d\u751f\u6210\u7684\u8f38\u51fa\u69cb\u5efa\u7684\u5f8c\u7db4\u6a39\uff0c\u4ee5\u6709\u6548\u9810\u6e2c\u5019\u9078\u8a5e\u5f59\u5e8f\u5217\u3002\u6211\u5011\u7684\u505a\u6cd5\u5be6\u73fe\u4e86\u9748\u6d3b\u7684\u6a39\u72c0\u7d50\u69cb\u63a8\u6e2c\uff0c\u800c\u7121\u9700\u7dad\u8b77\u548c\u5354\u8abf\u984d\u5916\u6a21\u578b\u7684\u958b\u92b7\u3002SuffixDecoding \u69cb\u5efa\u4e26\u52d5\u614b\u66f4\u65b0\u5f8c\u7db4\u6a39\uff0c\u4ee5\u64f7\u53d6\u751f\u6210\u6587\u672c\u4e2d\u7684\u6a21\u5f0f\uff0c\u4e26\u4f7f\u7528\u5b83\u5011\u901a\u904e\u57fa\u65bc\u7d93\u9a57\u8a5e\u5f59\u983b\u7387\u7684\u539f\u5247\u6027\u8a55\u5206\u6a5f\u5236\u69cb\u5efa\u63a8\u6e2c\u6a39\u3002SuffixDecoding \u53ea\u9700\u8981 CPU \u8a18\u61b6\u9ad4\uff0c\u9019\u5728\u5178\u578b\u7684 LLM \u670d\u52d9\u7bc0\u9ede\u4e0a\u5f88\u8c50\u5bcc\u4e14\u672a\u5145\u5206\u5229\u7528\u3002\u6211\u5011\u8b49\u660e SuffixDecoding \u8207\u57fa\u65bc\u6a21\u578b\u7684\u65b9\u6cd5\u76f8\u6bd4\uff0c\u5728\u5305\u62ec\u958b\u653e\u57df\u804a\u5929\u3001\u7a0b\u5f0f\u78bc\u751f\u6210\u548c\u6587\u5b57\u5230 SQL \u4efb\u52d9\u5728\u5167\u7684\u5404\u7a2e\u5de5\u4f5c\u8ca0\u8f09\u4e2d\u5be6\u73fe\u4e86\u5177\u6709\u7af6\u722d\u529b\u7684\u52a0\u901f\u3002\u5c0d\u65bc\u958b\u653e\u5f0f\u804a\u5929\u548c\u7a0b\u5f0f\u78bc\u751f\u6210\u4efb\u52d9\uff0cSuffixDecoding \u7684\u8f38\u51fa\u541e\u5410\u91cf\u6bd4 SpecInfer \u9ad8\u9054 1.4 \u500d\uff0c\u6bcf\u4ee4\u724c\u6642\u9593 (TPOT) \u5ef6\u9072\u4f4e\u9054 1.1 \u500d\u3002\u5c0d\u65bc\u5c08\u6709\u7684\u4e00\u9ad4\u591a\u7528 LLM \u6587\u5b57\u5230 SQL \u61c9\u7528\u7a0b\u5f0f\uff0cSuffixDecoding \u7684\u8f38\u51fa\u541e\u5410\u91cf\u6bd4\u63a8\u6e2c\u6027\u89e3\u78bc\u9ad8\u9054 2.9 \u500d\uff0c\u5ef6\u9072\u4f4e 3 \u500d\u3002\u6211\u5011\u7684\u8a55\u4f30\u8868\u660e\uff0c\u5373\u4f7f\u53ea\u6709 256 \u500b\u7bc4\u4f8b\u7684\u5c0f\u578b\u53c3\u8003\u8a9e\u6599\u5eab\uff0cSuffixDecoding \u4ecd\u80fd\u7dad\u6301\u5f88\u9ad8\u7684\u63a5\u53d7\u7387\uff0c\u540c\u6642\u96a8\u8457\u66f4\u591a\u6b77\u53f2\u8f38\u51fa\u7684\u7d0d\u5165\uff0c\u6548\u80fd\u6703\u6301\u7e8c\u63d0\u5347\u3002</paragraph>", "author": "Gabriele Oliaro et.al.", "authors": "Gabriele Oliaro, Zhihao Jia, Daniel Campos, Aurick Qiao", "id": "2411.04975v1", "paper_url": "http://arxiv.org/abs/2411.04975v1", "repo": "null"}}