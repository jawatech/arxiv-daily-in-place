{"2411.00577": {"publish_time": "2024-11-01", "title": "WLPlan: Relational Features for Symbolic Planning", "paper_summary": "Scalable learning for planning research generally involves juggling between\ndifferent programming languages for handling learning and planning modules\neffectively. Interpreted languages such as Python are commonly used for\nlearning routines due to their ease of use and the abundance of highly\nmaintained learning libraries they exhibit, while compiled languages such as\nC++ are used for planning routines due to their optimised resource usage.\nMotivated by the need for tools for developing scalable learning planners, we\nintroduce WLPlan, a C++ package with Python bindings which implements recent\npromising work for automatically generating relational features of planning\ntasks. Such features can be used for any downstream routine, such as learning\ndomain control knowledge or probing and understanding planning tasks. More\nspecifically, WLPlan provides functionality for (1) transforming planning tasks\ninto graphs, and (2) embedding planning graphs into feature vectors via graph\nkernels. The source code and instructions for the installation and usage of\nWLPlan are available at tinyurl.com/42kymswc", "paper_summary_zh": "\u53ef\u64f4\u5145\u7684\u5b78\u7fd2\u898f\u5283\u7814\u7a76\u901a\u5e38\u9700\u8981\u5728\u4e0d\u540c\u7684\u7a0b\u5f0f\u8a9e\u8a00\u4e4b\u9593\u5207\u63db\uff0c\u624d\u80fd\u6709\u6548\u5730\u8655\u7406\u5b78\u7fd2\u548c\u898f\u5283\u6a21\u7d44\u3002\u4f8b\u5982 Python \u7b49\u76f4\u8b6f\u8a9e\u8a00\u901a\u5e38\u7528\u65bc\u5b78\u7fd2\u5e38\u5f0f\uff0c\u56e0\u70ba\u5b83\u5011\u6613\u65bc\u4f7f\u7528\uff0c\u4e14\u6709\u8a31\u591a\u7dad\u8b77\u5b8c\u5584\u7684\u5b78\u7fd2\u51fd\u5f0f\u5eab\uff1b\u800c\u4f8b\u5982 C++ \u7b49\u7de8\u8b6f\u8a9e\u8a00\u5247\u7528\u65bc\u898f\u5283\u5e38\u5f0f\uff0c\u56e0\u70ba\u5b83\u5011\u80fd\u6700\u4f73\u5316\u8cc7\u6e90\u4f7f\u7528\u3002\u7531\u65bc\u9700\u8981\u958b\u767c\u53ef\u64f4\u5145\u5b78\u7fd2\u898f\u5283\u5668\u7684\u5de5\u5177\uff0c\u6211\u5011\u5f15\u9032\u4e86 WLPlan\uff0c\u9019\u662f\u4e00\u500b\u5177\u6709 Python \u7e6b\u7d50\u7684 C++ \u5957\u4ef6\uff0c\u5be6\u4f5c\u4e86\u8fd1\u671f\u6709\u524d\u9014\u7684\u81ea\u52d5\u7522\u751f\u898f\u5283\u4efb\u52d9\u95dc\u4fc2\u7279\u5fb5\u7684\u5de5\u4f5c\u3002\u6b64\u985e\u7279\u5fb5\u53ef\u7528\u65bc\u4efb\u4f55\u4e0b\u6e38\u5e38\u5f0f\uff0c\u4f8b\u5982\u5b78\u7fd2\u9818\u57df\u63a7\u5236\u77e5\u8b58\u6216\u63a2\u6e2c\u548c\u7406\u89e3\u898f\u5283\u4efb\u52d9\u3002\u66f4\u5177\u9ad4\u5730\u8aaa\uff0cWLPlan \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u529f\u80fd\uff1a(1) \u5c07\u898f\u5283\u4efb\u52d9\u8f49\u63db\u70ba\u5716\u5f62\uff0c\u4ee5\u53ca (2) \u900f\u904e\u5716\u5f62\u6838\u5c07\u898f\u5283\u5716\u5f62\u5d4c\u5165\u7279\u5fb5\u5411\u91cf\u3002WLPlan \u7684\u539f\u59cb\u78bc\u548c\u5b89\u88dd\u53ca\u4f7f\u7528\u8aaa\u660e\u53ef\u5728 tinyurl.com/42kymswc \u53d6\u5f97", "author": "Dillon Z. Chen et.al.", "authors": "Dillon Z. Chen", "id": "2411.00577v1", "paper_url": "http://arxiv.org/abs/2411.00577v1", "repo": "null"}}