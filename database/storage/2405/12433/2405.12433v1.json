{"2405.12433": {"publish_time": "2024-05-21", "title": "LLM+Reasoning+Planning for supporting incomplete user queries in presence of APIs", "paper_summary": "Recent availability of Large Language Models (LLMs) has led to the\ndevelopment of numerous LLM-based approaches aimed at providing natural\nlanguage interfaces for various end-user tasks. These end-user tasks in turn\ncan typically be accomplished by orchestrating a given set of APIs. In\npractice, natural language task requests (user queries) are often incomplete,\ni.e., they may not contain all the information required by the APIs. While LLMs\nexcel at natural language processing (NLP) tasks, they frequently hallucinate\non missing information or struggle with orchestrating the APIs. The key idea\nbehind our proposed approach is to leverage logical reasoning and classical AI\nplanning along with an LLM for accurately answering user queries including\nidentification and gathering of any missing information in these queries. Our\napproach uses an LLM and ASP (Answer Set Programming) solver to translate a\nuser query to a representation in Planning Domain Definition Language (PDDL)\nvia an intermediate representation in ASP. We introduce a special API\n\"get_info_api\" for gathering missing information. We model all the APIs as PDDL\nactions in a way that supports dataflow between the APIs. Our approach then\nuses a classical AI planner to generate an orchestration of API calls\n(including calls to get_info_api) to answer the user query. Our evaluation\nresults show that our approach significantly outperforms a pure LLM based\napproach by achieving over 95\\% success rate in most cases on a dataset\ncontaining complete and incomplete single goal and multi-goal queries where the\nmulti-goal queries may or may not require dataflow among the APIs.", "paper_summary_zh": "<paragraph>\u6700\u8fd1\u5927\u578b\u8bed\u8a00\u6a21\u578b (LLM) \u7684\u53ef\u7528\u6027\u4fc3\u6210\u4e86\u8bb8\u591a\u57fa\u4e8e LLM \u7684\u65b9\u6cd5\u7684\u53d1\u5c55\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u65e8\u5728\u4e3a\u5404\u79cd\u6700\u7ec8\u7528\u6237\u4efb\u52a1\u63d0\u4f9b\u81ea\u7136\u8bed\u8a00\u754c\u9762\u3002\u8fd9\u4e9b\u6700\u7ec8\u7528\u6237\u4efb\u52a1\u53cd\u8fc7\u6765\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u7f16\u6392\u7ed9\u5b9a\u7684 API \u96c6\u6765\u5b8c\u6210\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u81ea\u7136\u8bed\u8a00\u4efb\u52a1\u8bf7\u6c42\uff08\u7528\u6237\u67e5\u8be2\uff09\u901a\u5e38\u662f\u4e0d\u5b8c\u6574\u7684\uff0c\u5373\u5b83\u4eec\u53ef\u80fd\u4e0d\u5305\u542b API \u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\u3002\u867d\u7136 LLM \u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406 (NLP) \u4efb\u52a1\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u4f46\u5b83\u4eec\u7ecf\u5e38\u5bf9\u7f3a\u5931\u7684\u4fe1\u606f\u4ea7\u751f\u5e7b\u89c9\u6216\u96be\u4ee5\u7f16\u6392 API\u3002\u6211\u4eec\u63d0\u51fa\u7684\u65b9\u6cd5\u80cc\u540e\u7684\u5173\u952e\u601d\u60f3\u662f\u5229\u7528\u903b\u8f91\u63a8\u7406\u548c\u7ecf\u5178 AI \u89c4\u5212\u4ee5\u53ca LLM \u6765\u51c6\u786e\u56de\u7b54\u7528\u6237\u67e5\u8be2\uff0c\u5305\u62ec\u8bc6\u522b\u548c\u6536\u96c6\u8fd9\u4e9b\u67e5\u8be2\u4e2d\u4efb\u4f55\u7f3a\u5931\u7684\u4fe1\u606f\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u4f7f\u7528 LLM \u548c ASP\uff08Answer Set Programming\uff09\u6c42\u89e3\u5668\uff0c\u901a\u8fc7 ASP \u4e2d\u7684\u4e2d\u95f4\u8868\u793a\u5c06\u7528\u6237\u67e5\u8be2\u8f6c\u6362\u4e3a\u89c4\u5212\u57df\u5b9a\u4e49\u8bed\u8a00 (PDDL) \u4e2d\u7684\u8868\u793a\u3002\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u7279\u6b8a API \u201cget_info_api\u201d \u6765\u6536\u96c6\u7f3a\u5931\u7684\u4fe1\u606f\u3002\u6211\u4eec\u5c06\u6240\u6709 API \u5efa\u6a21\u4e3a PDDL \u52a8\u4f5c\uff0c\u4ee5\u652f\u6301 API \u4e4b\u95f4\u7684\u6570\u636e\u6d41\u3002\u7136\u540e\uff0c\u6211\u4eec\u7684\u65b9\u6cd5\u4f7f\u7528\u7ecf\u5178 AI \u89c4\u5212\u5668\u751f\u6210 API \u8c03\u7528\u7f16\u6392\uff08\u5305\u62ec\u5bf9 get_info_api \u7684\u8c03\u7528\uff09\u6765\u56de\u7b54\u7528\u6237\u67e5\u8be2\u3002\u6211\u4eec\u7684\u8bc4\u4f30\u7ed3\u679c\u8868\u660e\uff0c\u6211\u4eec\u7684\u65b9\u6cd5\u660e\u663e\u4f18\u4e8e\u57fa\u4e8e\u7eaf LLM \u7684\u65b9\u6cd5\uff0c\u5728\u5305\u542b\u5b8c\u6574\u548c\u4e0d\u5b8c\u6574\u5355\u76ee\u6807\u548c\u591a\u76ee\u6807\u67e5\u8be2\u7684\u6570\u636e\u96c6\u4e0a\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5b9e\u73b0\u4e86\u8d85\u8fc7 95% \u7684\u6210\u529f\u7387\uff0c\u5176\u4e2d\u591a\u76ee\u6807\u67e5\u8be2\u53ef\u80fd\u9700\u8981\u4e5f\u53ef\u80fd\u4e0d\u9700\u8981 API \u4e4b\u95f4\u7684\u6570\u636e\u6d41\u3002</paragraph>", "author": "Sudhir Agarwal et.al.", "authors": "Sudhir Agarwal, Anu Sreepathy, David H. Alonso, Prarit Lamba", "id": "2405.12433v1", "paper_url": "http://arxiv.org/abs/2405.12433v1", "repo": "null"}}