{"2410.18489": {"publish_time": "2024-10-24", "title": "LLM as a code generator in Agile Model Driven Development", "paper_summary": "Leveraging Large Language Models (LLM) like GPT4 in the auto generation of\ncode represents a significant advancement, yet it is not without its\nchallenges. The ambiguity inherent in natural language descriptions of software\nposes substantial obstacles to generating deployable, structured artifacts.\nThis research champions Model Driven Development (MDD) as a viable strategy to\novercome these challenges, proposing an Agile Model Driven Development (AMDD)\napproach that employs GPT4 as a code generator. This approach enhances the\nflexibility and scalability of the code auto generation process and offers\nagility that allows seamless adaptation to changes in models or deployment\nenvironments. We illustrate this by modeling a multi agent Unmanned Vehicle\nFleet (UVF) system using the Unified Modeling Language (UML), significantly\nreducing model ambiguity by integrating the Object Constraint Language (OCL)\nfor code structure meta modeling, and the FIPA ontology language for\ncommunication semantics meta modeling. Applying GPT4 auto generation\ncapabilities yields Java and Python code that is compatible with the JADE and\nPADE frameworks, respectively. Our thorough evaluation of the auto generated\ncode verifies its alignment with expected behaviors and identifies enhancements\nin agent interactions. Structurally, we assessed the complexity of code derived\nfrom a model constrained solely by OCL meta models, against that influenced by\nboth OCL and FIPA ontology meta models. The results indicate that the ontology\nconstrained meta model produces inherently more complex code, yet its\ncyclomatic complexity remains within manageable levels, suggesting that\nadditional meta model constraints can be incorporated without exceeding the\nhigh risk threshold for complexity.", "paper_summary_zh": "\u5229\u7528 GPT4 \u7b49\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u81ea\u52d5\u751f\u6210\u7a0b\u5f0f\u78bc\u662f\u4e00\u9805\u91cd\u5927\u9032\u5c55\uff0c\u4f46\u4e26\u975e\u6c92\u6709\u6311\u6230\u3002\u8edf\u9ad4\u81ea\u7136\u8a9e\u8a00\u63cf\u8ff0\u4e2d\u56fa\u6709\u7684\u6a21\u7cca\u6027\u5c0d\u7522\u751f\u53ef\u90e8\u7f72\u7684\u7d50\u69cb\u5316\u4eba\u5de5\u88fd\u54c1\u69cb\u6210\u91cd\u5927\u969c\u7919\u3002\u672c\u7814\u7a76\u4e3b\u5f35\u6a21\u578b\u9a45\u52d5\u958b\u767c (MDD) \u662f\u4e00\u7a2e\u514b\u670d\u9019\u4e9b\u6311\u6230\u7684\u53ef\u884c\u7b56\u7565\uff0c\u63d0\u51fa\u4e86\u4e00\u7a2e\u63a1\u7528 GPT4 \u4f5c\u70ba\u7a0b\u5f0f\u78bc\u751f\u6210\u5668\u7684\u654f\u6377\u6a21\u578b\u9a45\u52d5\u958b\u767c (AMDD) \u65b9\u6cd5\u3002\u9019\u7a2e\u65b9\u6cd5\u589e\u5f37\u4e86\u7a0b\u5f0f\u78bc\u81ea\u52d5\u751f\u6210\u904e\u7a0b\u7684\u5f48\u6027\u548c\u53ef\u64f4\u5145\u6027\uff0c\u4e26\u63d0\u4f9b\u4e86\u9748\u6d3b\u6027\uff0c\u5141\u8a31\u7121\u7e2b\u9069\u61c9\u6a21\u578b\u6216\u90e8\u7f72\u74b0\u5883\u7684\u8b8a\u66f4\u3002\u6211\u5011\u900f\u904e\u4f7f\u7528\u7d71\u4e00\u5efa\u6a21\u8a9e\u8a00 (UML) \u5efa\u6a21\u591a\u4ee3\u7406\u7121\u4eba\u8f09\u5177\u8eca\u968a (UVF) \u7cfb\u7d71\u4f86\u8aaa\u660e\u9019\u4e00\u9ede\uff0c\u900f\u904e\u6574\u5408\u7269\u4ef6\u7d04\u675f\u8a9e\u8a00 (OCL) \u9032\u884c\u7a0b\u5f0f\u78bc\u7d50\u69cb\u5143\u5efa\u6a21\uff0c\u4ee5\u53ca\u4f7f\u7528 FIPA ontology \u8a9e\u8a00\u9032\u884c\u901a\u8a0a\u8a9e\u7fa9\u5143\u5efa\u6a21\uff0c\u5927\u5e45\u6e1b\u5c11\u6a21\u578b\u7684\u6a21\u7cca\u6027\u3002\u61c9\u7528 GPT4 \u81ea\u52d5\u751f\u6210\u529f\u80fd\u7522\u751f\u8207 JADE \u548c PADE \u6846\u67b6\u5206\u5225\u76f8\u5bb9\u7684 Java \u548c Python \u7a0b\u5f0f\u78bc\u3002\u6211\u5011\u5c0d\u81ea\u52d5\u751f\u6210\u7a0b\u5f0f\u78bc\u7684\u5fb9\u5e95\u8a55\u4f30\u9a57\u8b49\u4e86\u5176\u8207\u9810\u671f\u884c\u70ba\u7684\u4e00\u81f4\u6027\uff0c\u4e26\u627e\u51fa\u4ee3\u7406\u4e92\u52d5\u4e2d\u7684\u6539\u9032\u4e4b\u8655\u3002\u5728\u7d50\u69cb\u4e0a\uff0c\u6211\u5011\u8a55\u4f30\u4e86\u50c5\u7531 OCL \u5143\u6a21\u578b\u7d04\u675f\u7684\u6a21\u578b\u6240\u884d\u751f\u7684\u7a0b\u5f0f\u78bc\u8907\u96dc\u5ea6\uff0c\u4e26\u8207\u53d7 OCL \u548c FIPA ontology \u5143\u6a21\u578b\u5f71\u97ff\u7684\u7a0b\u5f0f\u78bc\u8907\u96dc\u5ea6\u9032\u884c\u6bd4\u8f03\u3002\u7d50\u679c\u8868\u660e\uff0contology \u7d04\u675f\u7684\u5143\u6a21\u578b\u6703\u7522\u751f\u672c\u8cea\u4e0a\u66f4\u8907\u96dc\u7684\u7a0b\u5f0f\u78bc\uff0c\u4f46\u5176\u5708\u8907\u96dc\u5ea6\u4ecd\u4fdd\u6301\u5728\u53ef\u63a7\u7bc4\u570d\u5167\uff0c\u9019\u8868\u793a\u53ef\u4ee5\u7d0d\u5165\u984d\u5916\u7684\u5143\u6a21\u578b\u7d04\u675f\uff0c\u800c\u4e0d\u6703\u8d85\u904e\u8907\u96dc\u5ea6\u7684\u6975\u9ad8\u98a8\u96aa\u95be\u503c\u3002", "author": "Ahmed R. Sadik et.al.", "authors": "Ahmed R. Sadik, Sebastian Brulin, Markus Olhofer, Antonello Ceravola, Frank Joublin", "id": "2410.18489v1", "paper_url": "http://arxiv.org/abs/2410.18489v1", "repo": "null"}}