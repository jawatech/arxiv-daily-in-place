{"2408.05100": {"publish_time": "2024-08-09", "title": "AI-driven Java Performance Testing: Balancing Result Quality with Testing Time", "paper_summary": "Performance testing aims at uncovering efficiency issues of software systems.\nIn order to be both effective and practical, the design of a performance test\nmust achieve a reasonable trade-off between result quality and testing time.\nThis becomes particularly challenging in Java context, where the software\nundergoes a warm-up phase of execution, due to just-in-time compilation. During\nthis phase, performance measurements are subject to severe fluctuations, which\nmay adversely affect quality of performance test results. However, these\napproaches often provide suboptimal estimates of the warm-up phase, resulting\nin either insufficient or excessive warm-up iterations, which may degrade\nresult quality or increase testing time. There is still a lack of consensus on\nhow to properly address this problem. Here, we propose and study an AI-based\nframework to dynamically halt warm-up iterations at runtime. Specifically, our\nframework leverages recent advances in AI for Time Series Classification (TSC)\nto predict the end of the warm-up phase during test execution. We conduct\nexperiments by training three different TSC models on half a million of\nmeasurement segments obtained from JMH microbenchmark executions. We find that\nour framework significantly improves the accuracy of the warm-up estimates\nprovided by state-of-practice and state-of-the-art methods. This higher\nestimation accuracy results in a net improvement in either result quality or\ntesting time for up to +35.3% of the microbenchmarks. Our study highlights that\nintegrating AI to dynamically estimate the end of the warm-up phase can enhance\nthe cost-effectiveness of Java performance testing.", "paper_summary_zh": "\u6548\u80fd\u6e2c\u8a66\u65e8\u5728\u627e\u51fa\u8edf\u9ad4\u7cfb\u7d71\u7684\u6548\u7387\u554f\u984c\u3002\n\u70ba\u4e86\u540c\u6642\u517c\u9867\u6709\u6548\u6027\u548c\u5be6\u7528\u6027\uff0c\u6548\u80fd\u6e2c\u8a66\u7684\u8a2d\u8a08\u5fc5\u9808\u5728\u7d50\u679c\u54c1\u8cea\u8207\u6e2c\u8a66\u6642\u9593\u4e4b\u9593\u53d6\u5f97\u5408\u7406\u7684\u5e73\u8861\u3002\n\u9019\u5728 Java \u74b0\u5883\u4e2d\u7279\u5225\u5177\u6709\u6311\u6230\u6027\uff0c\u56e0\u70ba\u8edf\u9ad4\u6703\u56e0\u70ba\u5373\u6642\u7de8\u8b6f\u800c\u7d93\u6b77\u4e00\u6bb5\u6696\u8eab\u57f7\u884c\u968e\u6bb5\u3002\u5728\u9019\u500b\u968e\u6bb5\u4e2d\uff0c\u6548\u80fd\u6e2c\u91cf\u6703\u53d7\u5230\u5287\u70c8\u6ce2\u52d5\u7684\u5f71\u97ff\uff0c\u9032\u800c\u5c0d\u6548\u80fd\u6e2c\u8a66\u7d50\u679c\u7684\u54c1\u8cea\u9020\u6210\u8ca0\u9762\u5f71\u97ff\u3002\u7136\u800c\uff0c\u9019\u4e9b\u65b9\u6cd5\u901a\u5e38\u6703\u63d0\u4f9b\u6b21\u4f73\u7684\u6696\u8eab\u968e\u6bb5\u4f30\u8a08\uff0c\u5c0e\u81f4\u6696\u8eab\u53cd\u8986\u6e2c\u8a66\u4e0d\u8db3\u6216\u904e\u591a\uff0c\u9032\u800c\u964d\u4f4e\u7d50\u679c\u54c1\u8cea\u6216\u589e\u52a0\u6e2c\u8a66\u6642\u9593\u3002\u5c0d\u65bc\u5982\u4f55\u59a5\u5584\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u76ee\u524d\u5c1a\u672a\u9054\u6210\u5171\u8b58\u3002\u5728\u6b64\uff0c\u6211\u5011\u63d0\u51fa\u4e26\u63a2\u8a0e\u4e00\u500b\u57fa\u65bc AI \u7684\u67b6\u69cb\uff0c\u53ef\u4ee5\u5728\u57f7\u884c\u968e\u6bb5\u52d5\u614b\u66ab\u505c\u6696\u8eab\u53cd\u8986\u6e2c\u8a66\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u7684\u67b6\u69cb\u5229\u7528 AI \u5728\u6642\u9593\u5e8f\u5217\u5206\u985e (TSC) \u7684\u6700\u65b0\u9032\u5c55\uff0c\u5728\u6e2c\u8a66\u57f7\u884c\u671f\u9593\u9810\u6e2c\u6696\u8eab\u968e\u6bb5\u7684\u7d50\u675f\u3002\u6211\u5011\u900f\u904e\u5728\u5f9e JMH \u5fae\u57fa\u6e96\u6e2c\u8a66\u57f7\u884c\u4e2d\u53d6\u5f97\u7684\u4e94\u5341\u842c\u500b\u6e2c\u91cf\u5340\u6bb5\u4e0a\u8a13\u7df4\u4e09\u500b\u4e0d\u540c\u7684 TSC \u6a21\u578b\uff0c\u4f86\u9032\u884c\u5be6\u9a57\u3002\u6211\u5011\u767c\u73fe\u6211\u5011\u7684\u67b6\u69cb\u986f\u8457\u63d0\u5347\u4e86\u5be6\u52d9\u4e0a\u548c\u6700\u5148\u9032\u65b9\u6cd5\u6240\u63d0\u4f9b\u7684\u6696\u8eab\u4f30\u8a08\u6e96\u78ba\u5ea6\u3002\u9019\u500b\u66f4\u9ad8\u7684\u4f30\u8a08\u6e96\u78ba\u5ea6\u5c0e\u81f4\u5fae\u57fa\u6e96\u6e2c\u8a66\u7684\u7d50\u679c\u54c1\u8cea\u6216\u6e2c\u8a66\u6642\u9593\u6de8\u6539\u5584\u5e45\u5ea6\u6700\u9ad8\u9054 +35.3%\u3002\u6211\u5011\u7684\u7814\u7a76\u5f37\u8abf\uff0c\u6574\u5408 AI \u4ee5\u52d5\u614b\u4f30\u8a08\u6696\u8eab\u968e\u6bb5\u7684\u7d50\u675f\uff0c\u53ef\u4ee5\u63d0\u5347 Java \u6548\u80fd\u6e2c\u8a66\u7684\u6210\u672c\u6548\u76ca\u3002", "author": "Luca Traini et.al.", "authors": "Luca Traini, Federico Di Menna, Vittorio Cortellessa", "id": "2408.05100v1", "paper_url": "http://arxiv.org/abs/2408.05100v1", "repo": "null"}}