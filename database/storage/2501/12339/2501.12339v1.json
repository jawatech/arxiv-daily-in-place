{"2501.12339": {"publish_time": "2025-01-21", "title": "Treefix: Enabling Execution with a Tree of Prefixes", "paper_summary": "The ability to execute code is a prerequisite for various dynamic program\nanalyses. Learning-guided execution has been proposed as an approach to enable\nthe execution of arbitrary code snippets by letting a neural model predict\nlikely values for any missing variables. Although state-of-the-art\nlearning-guided execution approaches, such as LExecutor, can enable the\nexecution of a relative high amount of code, they are limited to predicting a\nrestricted set of possible values and do not use any feedback from previous\nexecutions to execute even more code. This paper presents Treefix, a novel\nlearning-guided execution approach that leverages LLMs to iteratively create\ncode prefixes that enable the execution of a given code snippet. The approach\naddresses the problem in a multi-step fashion, where each step uses feedback\nabout the code snippet and its execution to instruct an LLM to improve a\npreviously generated prefix. This process iteratively creates a tree of\nprefixes, a subset of which is returned to the user as prefixes that maximize\nthe number of executed lines in the code snippet. In our experiments with two\ndatasets of Python code snippets, Treefix achieves 25% and 7% more coverage\nrelative to the current state of the art in learning-guided execution, covering\na total of 84% and 82% of all lines in the code snippets.", "paper_summary_zh": "\u57f7\u884c\u7a0b\u5f0f\u78bc\u7684\u80fd\u529b\u662f\u5404\u7a2e\u52d5\u614b\u7a0b\u5f0f\u5206\u6790\u7684\u524d\u63d0\u3002\u5b78\u7fd2\u5c0e\u5411\u57f7\u884c\u5df2\u88ab\u63d0\u8b70\u70ba\u4e00\u7a2e\u65b9\u6cd5\uff0c\u8b93\u795e\u7d93\u6a21\u578b\u9810\u6e2c\u4efb\u4f55\u907a\u5931\u8b8a\u6578\u7684\u53ef\u80fd\u503c\uff0c\u5f9e\u800c\u80fd\u5920\u57f7\u884c\u4efb\u610f\u7a0b\u5f0f\u78bc\u7247\u6bb5\u3002\u5118\u7ba1\u6700\u5148\u9032\u7684\u5b78\u7fd2\u5c0e\u5411\u57f7\u884c\u65b9\u6cd5\uff08\u4f8b\u5982 LExecutor\uff09\u53ef\u4ee5\u57f7\u884c\u76f8\u5c0d\u5927\u91cf\u7684\u7a0b\u5f0f\u78bc\uff0c\u4f46\u5b83\u5011\u50c5\u9650\u65bc\u9810\u6e2c\u4e00\u7d44\u53ef\u80fd\u7684\u53d7\u9650\u503c\uff0c\u4e26\u4e14\u4e0d\u4f7f\u7528\u5148\u524d\u57f7\u884c\u7684\u4efb\u4f55\u56de\u994b\u4f86\u57f7\u884c\u66f4\u591a\u7a0b\u5f0f\u78bc\u3002\u672c\u6587\u63d0\u51fa Treefix\uff0c\u9019\u662f\u4e00\u7a2e\u65b0\u7a4e\u7684\u5b78\u7fd2\u5c0e\u5411\u57f7\u884c\u65b9\u6cd5\uff0c\u5b83\u5229\u7528 LLM \u8fed\u4ee3\u5efa\u7acb\u7a0b\u5f0f\u78bc\u524d\u7db4\uff0c\u4ee5\u57f7\u884c\u7d66\u5b9a\u7684\u7a0b\u5f0f\u78bc\u7247\u6bb5\u3002\u8a72\u65b9\u6cd5\u4ee5\u591a\u6b65\u9a5f\u65b9\u5f0f\u89e3\u6c7a\u554f\u984c\uff0c\u5176\u4e2d\u6bcf\u4e00\u6b65\u90fd\u4f7f\u7528\u95dc\u65bc\u7a0b\u5f0f\u78bc\u7247\u6bb5\u53ca\u5176\u57f7\u884c\u7684\u56de\u994b\uff0c\u4f86\u6307\u5c0e LLM \u6539\u9032\u5148\u524d\u751f\u6210\u7684\u5b57\u9996\u3002\u6b64\u904e\u7a0b\u53cd\u8986\u5efa\u7acb\u4e00\u500b\u524d\u7db4\u6a39\uff0c\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u4f5c\u70ba\u524d\u7db4\u56de\u50b3\u7d66\u4f7f\u7528\u8005\uff0c\u4ee5\u6700\u5927\u5316\u7a0b\u5f0f\u78bc\u7247\u6bb5\u4e2d\u57f7\u884c\u884c\u7684\u6578\u91cf\u3002\u5728\u6211\u5011\u4f7f\u7528\u5169\u500b Python \u7a0b\u5f0f\u78bc\u7247\u6bb5\u8cc7\u6599\u96c6\u9032\u884c\u7684\u5be6\u9a57\u4e2d\uff0cTreefix \u5728\u5b78\u7fd2\u5c0e\u5411\u57f7\u884c\u4e2d\u53d6\u5f97\u4e86\u6bd4\u76ee\u524d\u6700\u5148\u9032\u7684\u6280\u8853\u9ad8\u51fa 25% \u548c 7% \u7684\u8986\u84cb\u7387\uff0c\u7e3d\u5171\u6db5\u84cb\u4e86\u7a0b\u5f0f\u78bc\u7247\u6bb5\u4e2d\u6240\u6709\u884c\u7684 84% \u548c 82%\u3002", "author": "Beatriz Souza et.al.", "authors": "Beatriz Souza, Michael Pradel", "id": "2501.12339v1", "paper_url": "http://arxiv.org/abs/2501.12339v1", "repo": "null"}}