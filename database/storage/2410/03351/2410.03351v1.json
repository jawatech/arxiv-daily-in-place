{"2410.03351": {"publish_time": "2024-10-04", "title": "Generating Equivalent Representations of Code By A Self-Reflection Approach", "paper_summary": "Equivalent Representations (ERs) of code are textual representations that\npreserve the same semantics as the code itself, e.g., natural language comments\nand pseudocode. ERs play a critical role in software development and\nmaintenance. However, how to automatically generate ERs of code remains an open\nchallenge. In this paper, we propose a self-reflection approach to generating\nERs of code. It enables two Large Language Models (LLMs) to work mutually and\nproduce an ER through a reflection process. Depending on whether constraints on\nERs are applied, our approach generates ERs in both open and constrained\nsettings. We conduct a empirical study to generate ERs in two settings and\nobtain eight findings. (1) Generating ERs in the open setting. In the open\nsetting, we allow LLMs to represent code without any constraints, analyzing the\nresulting ERs and uncovering five key findings. These findings shed light on\nhow LLMs comprehend syntactic structures, APIs, and numerical computations in\ncode. (2) Generating ERs in the constrained setting. In the constrained\nsetting, we impose constraints on ERs, such as natural language comments,\npseudocode, and flowcharts. This allows our approach to address a range of\nsoftware engineering tasks. Based on our experiments, we have three findings\ndemonstrating that our approach can effectively generate ERs that adhere to\nspecific constraints, thus supporting various software engineering tasks. (3)\nFuture directions. We also discuss potential future research directions, such\nas deriving intermediate languages for code generation, exploring LLM-friendly\nrequirement descriptions, and further supporting software engineering tasks. We\nbelieve that this paper will spark discussions in research communities and\ninspire many follow-up studies.", "paper_summary_zh": "<paragraph>\u4ee3\u78bc\u7684\u7b49\u6548\u8868\u793a (ER) \u662f\u6587\u5b57\u8868\u793a\uff0c\u5b83\u4fdd\u7559\u8207\u4ee3\u78bc\u672c\u8eab\u76f8\u540c\u7684\u8a9e\u7fa9\uff0c\u4f8b\u5982\u81ea\u7136\u8a9e\u8a00\u8a3b\u89e3\u548c\u507d\u4ee3\u78bc\u3002ER \u5728\u8edf\u9ad4\u958b\u767c\u548c\u7dad\u8b77\u4e2d\u626e\u6f14\u81f3\u95dc\u91cd\u8981\u7684\u89d2\u8272\u3002\u7136\u800c\uff0c\u5982\u4f55\u81ea\u52d5\u7522\u751f\u4ee3\u78bc\u7684 ER \u4ecd\u7136\u662f\u4e00\u500b\u672a\u89e3\u6c7a\u7684\u6311\u6230\u3002\u5728\u9019\u7bc7\u8ad6\u6587\u4e2d\uff0c\u6211\u5011\u63d0\u51fa\u4e00\u500b\u81ea\u7701\u65b9\u6cd5\u4f86\u7522\u751f\u4ee3\u78bc\u7684 ER\u3002\u5b83\u8b93\u5169\u500b\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4e92\u76f8\u5408\u4f5c\uff0c\u4e26\u900f\u904e\u81ea\u7701\u904e\u7a0b\u7522\u751f ER\u3002\u53d6\u6c7a\u65bc\u662f\u5426\u5957\u7528 ER \u7684\u9650\u5236\uff0c\u6211\u5011\u7684\u505a\u6cd5\u5728\u958b\u653e\u548c\u53d7\u9650\u7684\u8a2d\u5b9a\u4e2d\u7522\u751f ER\u3002\u6211\u5011\u9032\u884c\u4e00\u9805\u5be6\u8b49\u7814\u7a76\uff0c\u5728\u5169\u500b\u8a2d\u5b9a\u4e2d\u7522\u751f ER\uff0c\u4e26\u7372\u5f97\u516b\u9805\u767c\u73fe\u3002(1) \u5728\u958b\u653e\u8a2d\u5b9a\u4e2d\u7522\u751f ER\u3002\u5728\u958b\u653e\u8a2d\u5b9a\u4e2d\uff0c\u6211\u5011\u5141\u8a31 LLM \u5728\u6c92\u6709\u4efb\u4f55\u9650\u5236\u7684\u60c5\u6cc1\u4e0b\u8868\u793a\u4ee3\u78bc\uff0c\u5206\u6790\u7522\u751f\u7684 ER \u4e26\u627e\u51fa\u4e94\u9805\u95dc\u9375\u767c\u73fe\u3002\u9019\u4e9b\u767c\u73fe\u95e1\u660e LLM \u5982\u4f55\u7406\u89e3\u4ee3\u78bc\u4e2d\u7684\u8a9e\u6cd5\u7d50\u69cb\u3001API \u548c\u6578\u503c\u904b\u7b97\u3002(2) \u5728\u53d7\u9650\u8a2d\u5b9a\u4e2d\u7522\u751f ER\u3002\u5728\u53d7\u9650\u8a2d\u5b9a\u4e2d\uff0c\u6211\u5011\u5c0d ER \u65bd\u52a0\u9650\u5236\uff0c\u4f8b\u5982\u81ea\u7136\u8a9e\u8a00\u8a3b\u89e3\u3001\u507d\u4ee3\u78bc\u548c\u6d41\u7a0b\u5716\u3002\u9019\u8b93\u6211\u5011\u7684\u505a\u6cd5\u80fd\u5920\u8655\u7406\u4e00\u7cfb\u5217\u8edf\u9ad4\u5de5\u7a0b\u4efb\u52d9\u3002\u6839\u64da\u6211\u5011\u7684\u5be6\u9a57\uff0c\u6211\u5011\u6709\u4e09\u500b\u767c\u73fe\uff0c\u8b49\u660e\u6211\u5011\u7684\u505a\u6cd5\u53ef\u4ee5\u6709\u6548\u7522\u751f\u7b26\u5408\u7279\u5b9a\u9650\u5236\u7684 ER\uff0c\u9032\u800c\u652f\u63f4\u5404\u7a2e\u8edf\u9ad4\u5de5\u7a0b\u4efb\u52d9\u3002(3) \u672a\u4f86\u65b9\u5411\u3002\u6211\u5011\u4e5f\u8a0e\u8ad6\u6f5b\u5728\u7684\u672a\u4f86\u7814\u7a76\u65b9\u5411\uff0c\u4f8b\u5982\u63a8\u5c0e\u7528\u65bc\u7522\u751f\u4ee3\u78bc\u7684\u4e2d\u9593\u8a9e\u8a00\u3001\u63a2\u7d22 LLM \u53cb\u5584\u7684\u9700\u6c42\u63cf\u8ff0\uff0c\u4ee5\u53ca\u9032\u4e00\u6b65\u652f\u63f4\u8edf\u9ad4\u5de5\u7a0b\u4efb\u52d9\u3002\u6211\u5011\u76f8\u4fe1\u9019\u7bc7\u8ad6\u6587\u5c07\u5728\u7814\u7a76\u793e\u7fa4\u4e2d\u5f15\u767c\u8a0e\u8ad6\uff0c\u4e26\u6fc0\u52f5\u8a31\u591a\u5f8c\u7e8c\u7814\u7a76\u3002</paragraph>", "author": "Jia Li et.al.", "authors": "Jia Li, Ge Li, Lecheng Wang, Hao Zhu, Zhi Jin", "id": "2410.03351v1", "paper_url": "http://arxiv.org/abs/2410.03351v1", "repo": "null"}}