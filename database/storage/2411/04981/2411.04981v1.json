{"2411.04981": {"publish_time": "2024-11-07", "title": "Enhancing Reverse Engineering: Investigating and Benchmarking Large Language Models for Vulnerability Analysis in Decompiled Binaries", "paper_summary": "Security experts reverse engineer (decompile) binary code to identify\ncritical security vulnerabilities. The limited access to source code in vital\nsystems - such as firmware, drivers, and proprietary software used in Critical\nInfrastructures (CI) - makes this analysis even more crucial on the binary\nlevel. Even with available source code, a semantic gap persists after\ncompilation between the source and the binary code executed by the processor.\nThis gap may hinder the detection of vulnerabilities in source code. That being\nsaid, current research on Large Language Models (LLMs) overlooks the\nsignificance of decompiled binaries in this area by focusing solely on source\ncode. In this work, we are the first to empirically uncover the substantial\nsemantic limitations of state-of-the-art LLMs when it comes to analyzing\nvulnerabilities in decompiled binaries, largely due to the absence of relevant\ndatasets. To bridge the gap, we introduce DeBinVul, a novel decompiled binary\ncode vulnerability dataset. Our dataset is multi-architecture and\nmulti-optimization, focusing on C/C++ due to their wide usage in CI and\nassociation with numerous vulnerabilities. Specifically, we curate 150,872\nsamples of vulnerable and non-vulnerable decompiled binary code for the task of\n(i) identifying; (ii) classifying; (iii) describing vulnerabilities; and (iv)\nrecovering function names in the domain of decompiled binaries. Subsequently,\nwe fine-tune state-of-the-art LLMs using DeBinVul and report on a performance\nincrease of 19%, 24%, and 21% in the capabilities of CodeLlama, Llama3, and\nCodeGen2 respectively, in detecting binary code vulnerabilities. Additionally,\nusing DeBinVul, we report a high performance of 80-90% on the vulnerability\nclassification task. Furthermore, we report improved performance in function\nname recovery and vulnerability description tasks.", "paper_summary_zh": "<paragraph>\u5b89\u5168\u5c08\u5bb6\u9006\u5411\u5de5\u7a0b\uff08\u53cd\u7de8\u8b6f\uff09\u4e8c\u9032\u5236\u7a0b\u5f0f\u78bc\uff0c\u4ee5\u627e\u51fa\u95dc\u9375\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u5728\u91cd\u8981\u7cfb\u7d71\uff08\u4f8b\u5982\u97cc\u9ad4\u3001\u9a45\u52d5\u7a0b\u5f0f\u548c\u95dc\u9375\u57fa\u790e\u8a2d\u65bd (CI) \u4e2d\u4f7f\u7528\u7684\u5c08\u6709\u8edf\u9ad4\uff09\u4e2d\uff0c\u5c0d\u539f\u59cb\u78bc\u7684\u5b58\u53d6\u6709\u9650\uff0c\u9019\u4f7f\u5f97\u5728\u4e8c\u9032\u5236\u5c64\u7d1a\u9032\u884c\u6b64\u5206\u6790\u8b8a\u5f97\u66f4\u52a0\u91cd\u8981\u3002\u5373\u4f7f\u6709\u539f\u59cb\u78bc\u53ef\u7528\uff0c\u5728\u7de8\u8b6f\u5f8c\uff0c\u539f\u59cb\u78bc\u548c\u8655\u7406\u5668\u57f7\u884c\u7684\u4e8c\u9032\u5236\u7a0b\u5f0f\u78bc\u4e4b\u9593\u4ecd\u5b58\u5728\u8a9e\u610f\u5dee\u8ddd\u3002\u6b64\u5dee\u8ddd\u53ef\u80fd\u6703\u963b\u7919\u5728\u539f\u59cb\u78bc\u4e2d\u5075\u6e2c\u6f0f\u6d1e\u3002\u8a71\u96d6\u5982\u6b64\uff0c\u76ee\u524d\u5c0d\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u7814\u7a76\u5ffd\u7565\u4e86\u53cd\u7de8\u8b6f\u4e8c\u9032\u5236\u7a0b\u5f0f\u78bc\u5728\u6b64\u9818\u57df\u7684\u91cd\u8981\u6027\uff0c\u56e0\u70ba\u5b83\u5011\u53ea\u5c08\u6ce8\u65bc\u539f\u59cb\u78bc\u3002\u5728\u9019\u9805\u5de5\u4f5c\u4e2d\uff0c\u6211\u5011\u7387\u5148\u6191\u7d93\u9a57\u63ed\u9732\u6700\u5148\u9032\u7684 LLM \u5728\u5206\u6790\u53cd\u7de8\u8b6f\u4e8c\u9032\u5236\u7a0b\u5f0f\u78bc\u4e2d\u7684\u6f0f\u6d1e\u6642\u5b58\u5728\u5927\u91cf\u7684\u8a9e\u610f\u9650\u5236\uff0c\u9019\u4e3b\u8981\u662f\u56e0\u70ba\u7f3a\u4e4f\u76f8\u95dc\u7684\u8cc7\u6599\u96c6\u3002\u70ba\u4e86\u5f4c\u88dc\u9019\u500b\u5dee\u8ddd\uff0c\u6211\u5011\u5f15\u5165\u4e86 DeBinVul\uff0c\u9019\u662f\u4e00\u500b\u65b0\u7a4e\u7684\u53cd\u7de8\u8b6f\u4e8c\u9032\u5236\u7a0b\u5f0f\u78bc\u6f0f\u6d1e\u8cc7\u6599\u96c6\u3002\u6211\u5011\u7684\u8cc7\u6599\u96c6\u662f\u591a\u67b6\u69cb\u548c\u591a\u6700\u4f73\u5316\u7684\uff0c\u7531\u65bc C/C++ \u5728 CI \u4e2d\u5ee3\u6cdb\u4f7f\u7528\u4e14\u8207\u8a31\u591a\u6f0f\u6d1e\u76f8\u95dc\uff0c\u56e0\u6b64\u6211\u5011\u5c08\u6ce8\u65bc C/C++\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u7b56\u5283\u4e86 150,872 \u500b\u6709\u6f0f\u6d1e\u548c\u7121\u6f0f\u6d1e\u7684\u53cd\u7de8\u8b6f\u4e8c\u9032\u5236\u7a0b\u5f0f\u78bc\u7bc4\u4f8b\uff0c\u7528\u65bc (i) \u8b58\u5225\uff1b(ii) \u5206\u985e\uff1b(iii) \u63cf\u8ff0\u6f0f\u6d1e\uff1b\u4ee5\u53ca (iv) \u5728\u53cd\u7de8\u8b6f\u4e8c\u9032\u5236\u7a0b\u5f0f\u78bc\u7684\u9818\u57df\u4e2d\u5fa9\u539f\u51fd\u5f0f\u540d\u7a31\u3002\u96a8\u5f8c\uff0c\u6211\u5011\u4f7f\u7528 DeBinVul \u5fae\u8abf\u6700\u5148\u9032\u7684 LLM\uff0c\u4e26\u5831\u544a CodeLlama\u3001Llama3 \u548c CodeGen2 \u5728\u5075\u6e2c\u4e8c\u9032\u5236\u7a0b\u5f0f\u78bc\u6f0f\u6d1e\u65b9\u9762\u7684\u80fd\u529b\u5206\u5225\u63d0\u5347\u4e86 19%\u300124% \u548c 21%\u3002\u6b64\u5916\uff0c\u4f7f\u7528 DeBinVul\uff0c\u6211\u5011\u5831\u544a\u4e86\u5728\u6f0f\u6d1e\u5206\u985e\u4efb\u52d9\u4e2d 80-90% \u7684\u9ad8\u6027\u80fd\u3002\u6b64\u5916\uff0c\u6211\u5011\u5831\u544a\u4e86\u51fd\u5f0f\u540d\u7a31\u5fa9\u539f\u548c\u6f0f\u6d1e\u63cf\u8ff0\u4efb\u52d9\u7684\u6548\u80fd\u63d0\u5347\u3002</paragraph>", "author": "Dylan Manuel et.al.", "authors": "Dylan Manuel, Nafis Tanveer Islam, Joseph Khoury, Ana Nunez, Elias Bou-Harb, Peyman Najafirad", "id": "2411.04981v1", "paper_url": "http://arxiv.org/abs/2411.04981v1", "repo": "null"}}