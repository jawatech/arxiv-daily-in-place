{"2406.17276": {"publish_time": "2024-06-25", "title": "OPT-Tree: Speculative Decoding with Adaptive Draft Tree Structure", "paper_summary": "Autoregressive language models demonstrate excellent performance in various\nscenarios. However, the inference efficiency is limited by its\none-step-one-word generation mode, which has become a pressing problem recently\nas the models become increasingly larger. Speculative decoding employs a \"draft\nand then verify\" mechanism to allow multiple tokens to be generated in one\nstep, realizing lossless acceleration. Existing methods mainly adopt fixed\nheuristic draft structures, which fail to adapt to different situations to\nmaximize the acceptance length during verification. To alleviate this dilemma,\nwe proposed OPT-Tree, an algorithm to construct adaptive and scalable draft\ntrees. It searches the optimal tree structure that maximizes the mathematical\nexpectation of the acceptance length in each decoding step. Experimental\nresults reveal that OPT-Tree outperforms the existing draft structures and\nachieves a speed-up ratio of up to 3.2 compared with autoregressive decoding.\nIf the draft model is powerful enough and the node budget is sufficient, it can\ngenerate more than ten tokens in a single step. Our code is available at\nhttps://github.com/Jikai0Wang/OPT-Tree.", "paper_summary_zh": "\u81ea\u56de\u5f52\u8bed\u8a00\u6a21\u578b\u5728\u5404\u79cd\u573a\u666f\u4e2d\u8868\u73b0\u51fa\u4f18\u5f02\u7684\u6027\u80fd\u3002\u7136\u800c\uff0c\u5176\u63a8\u7406\u6548\u7387\u53d7\u5230\u5176\u4e00\u6b65\u4e00\u8bcd\u7684\u751f\u6210\u6a21\u5f0f\u7684\u9650\u5236\uff0c\u968f\u7740\u6a21\u578b\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff0c\u8fd9\u5df2\u6210\u4e3a\u6700\u8fd1\u7684\u4e00\u4e2a\u7d27\u8feb\u95ee\u9898\u3002\u63a8\u6d4b\u89e3\u7801\u91c7\u7528\u201c\u5148\u8d77\u8349\u518d\u9a8c\u8bc1\u201d\u7684\u673a\u5236\uff0c\u5141\u8bb8\u4e00\u6b65\u751f\u6210\u591a\u4e2a\u6807\u8bb0\uff0c\u5b9e\u73b0\u65e0\u635f\u52a0\u901f\u3002\u73b0\u6709\u65b9\u6cd5\u4e3b\u8981\u91c7\u7528\u56fa\u5b9a\u7684\u542f\u53d1\u5f0f\u8349\u7a3f\u7ed3\u6784\uff0c\u65e0\u6cd5\u9002\u5e94\u4e0d\u540c\u7684\u60c5\u51b5\u4ee5\u6700\u5927\u5316\u9a8c\u8bc1\u671f\u95f4\u7684\u63a5\u53d7\u957f\u5ea6\u3002\u4e3a\u4e86\u7f13\u89e3\u8fd9\u4e00\u56f0\u5883\uff0c\u6211\u4eec\u63d0\u51fa\u4e86 OPT-Tree\uff0c\u4e00\u79cd\u6784\u5efa\u81ea\u9002\u5e94\u4e14\u53ef\u6269\u5c55\u7684\u8349\u7a3f\u6811\u7684\u7b97\u6cd5\u3002\u5b83\u641c\u7d22\u6700\u4f18\u6811\u7ed3\u6784\uff0c\u4ee5\u6700\u5927\u5316\u6bcf\u4e2a\u89e3\u7801\u6b65\u9aa4\u4e2d\u63a5\u53d7\u957f\u5ea6\u7684\u6570\u5b66\u671f\u671b\u3002\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cOPT-Tree \u4f18\u4e8e\u73b0\u6709\u7684\u8349\u7a3f\u7ed3\u6784\uff0c\u4e0e\u81ea\u56de\u5f52\u89e3\u7801\u76f8\u6bd4\uff0c\u5b9e\u73b0\u4e86\u9ad8\u8fbe 3.2 \u7684\u52a0\u901f\u6bd4\u3002\u5982\u679c\u8349\u7a3f\u6a21\u578b\u8db3\u591f\u5f3a\u5927\uff0c\u5e76\u4e14\u8282\u70b9\u9884\u7b97\u5145\u8db3\uff0c\u5b83\u53ef\u4ee5\u5728\u4e00\u6b65\u4e2d\u751f\u6210\u5341\u591a\u4e2a\u6807\u8bb0\u3002\u6211\u4eec\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 https://github.com/Jikai0Wang/OPT-Tree \u4e2d\u83b7\u5f97\u3002", "author": "Jikai Wang et.al.", "authors": "Jikai Wang, Yi Su, Juntao Li, Qinrong Xia, Zi Ye, Xinyu Duan, Zhefeng Wang, Min Zhang", "id": "2406.17276v1", "paper_url": "http://arxiv.org/abs/2406.17276v1", "repo": "https://github.com/jikai0wang/opt-tree"}}