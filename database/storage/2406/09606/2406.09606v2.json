{"2406.09606": {"publish_time": "2024-06-13", "title": "Cross-Modality Program Representation Learning for Electronic Design Automation with High-Level Synthesis", "paper_summary": "In recent years, domain-specific accelerators (DSAs) have gained popularity\nfor applications such as deep learning and autonomous driving. To facilitate\nDSA designs, programmers use high-level synthesis (HLS) to compile a high-level\ndescription written in C/C++ into a design with low-level hardware description\nlanguages that eventually synthesize DSAs on circuits. However, creating a\nhigh-quality HLS design still demands significant domain knowledge,\nparticularly in microarchitecture decisions expressed as \\textit{pragmas}.\nThus, it is desirable to automate such decisions with the help of machine\nlearning for predicting the quality of HLS designs, requiring a deeper\nunderstanding of the program that consists of original code and pragmas.\nNaturally, these programs can be considered as sequence data. In addition,\nthese programs can be compiled and converted into a control data flow graph\n(CDFG). But existing works either fail to leverage both modalities or combine\nthe two in shallow or coarse ways. We propose ProgSG, a model that allows\ninteraction between the source code sequence modality and the graph modality in\na deep and fine-grained way. To alleviate the scarcity of labeled designs, a\npre-training method is proposed based on a suite of compiler's data flow\nanalysis tasks. Experimental results show that ProgSG reduces the RMSE of\ndesign performance predictions by up to $22\\%$, and identifies designs with an\naverage of $1.10\\times$ and $1.26\\times$ (up to $8.17\\times$ and $13.31\\times$)\nperformance improvement in design space exploration (DSE) task compared to HARP\nand AutoDSE, respectively.", "paper_summary_zh": "<paragraph>\u8fd1\u5e74\u6765\uff0c\u7279\u5b9a\u9886\u57df\u52a0\u901f\u5668 (DSA) \u5728\u6df1\u5ea6\u5b66\u4e60\u548c\u81ea\u52a8\u9a7e\u9a76\u7b49\u5e94\u7528\u4e2d\u83b7\u5f97\u4e86\u5e7f\u6cdb\u5e94\u7528\u3002\u4e3a\u4e86\u4fc3\u8fdb DSA \u8bbe\u8ba1\uff0c\u7a0b\u5e8f\u5458\u4f7f\u7528\u9ad8\u7ea7\u7efc\u5408 (HLS) \u5c06\u7528 C/C++ \u7f16\u5199\u7684\u8f83\u9ad8\u5c42\u6b21\u63cf\u8ff0\u7f16\u8bd1\u6210\u91c7\u7528\u4f4e\u5c42\u6b21\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u7684\u8bbe\u8ba1\uff0c\u6700\u7ec8\u5728\u7535\u8def\u4e2d\u7efc\u5408 DSA\u3002\u7136\u800c\uff0c\u521b\u5efa\u9ad8\u8d28\u91cf HLS \u8bbe\u8ba1\u4ecd\u7136\u9700\u8981\u5927\u91cf\u7684\u9886\u57df\u77e5\u8bc6\uff0c\u5c24\u5176\u662f\u4ee5\u201c\u7f16\u8bd1\u5668\u6307\u793a\u201d\u5f62\u5f0f\u8868\u8fbe\u7684\u5fae\u67b6\u6784\u51b3\u7b56\u3002\u56e0\u6b64\uff0c\u671f\u671b\u501f\u52a9\u673a\u5668\u5b66\u4e60\u81ea\u52a8\u5316\u6b64\u7c7b\u51b3\u7b56\uff0c\u4ee5\u9884\u6d4b HLS \u8bbe\u8ba1\u7684\u8d28\u91cf\uff0c\u9700\u8981\u66f4\u6df1\u5165\u5730\u7406\u89e3\u7531\u539f\u59cb\u4ee3\u7801\u548c\u7f16\u8bd1\u5668\u6307\u793a\u7ec4\u6210\u7684\u7a0b\u5e8f\u3002\u81ea\u7136\u800c\u7136\u5730\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5e8f\u5217\u6570\u636e\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u7f16\u8bd1\u5e76\u8f6c\u6362\u4e3a\u63a7\u5236\u6570\u636e\u6d41\u56fe (CDFG)\u3002\u4f46\u73b0\u6709\u5de5\u4f5c\u8981\u4e48\u65e0\u6cd5\u5229\u7528\u8fd9\u4e24\u79cd\u65b9\u5f0f\uff0c\u8981\u4e48\u4ee5\u6d45\u663e\u6216\u7c97\u7565\u7684\u65b9\u5f0f\u5c06\u4e24\u8005\u7ed3\u5408\u8d77\u6765\u3002\u6211\u4eec\u63d0\u51fa\u4e86 ProgSG\uff0c\u8fd9\u662f\u4e00\u4e2a\u5141\u8bb8\u4ee5\u6df1\u5165\u4e14\u7ec6\u7c92\u5ea6\u7684\u5f62\u5f0f\u5728\u6e90\u4ee3\u7801\u5e8f\u5217\u65b9\u5f0f\u548c\u56fe\u65b9\u5f0f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684\u6a21\u578b\u3002\u4e3a\u4e86\u7f13\u89e3\u6807\u8bb0\u8bbe\u8ba1\u7a00\u7f3a\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u7f16\u8bd1\u5668\u6570\u636e\u6d41\u5206\u6790\u4efb\u52a1\u5957\u4ef6\u7684\u9884\u8bad\u7ec3\u65b9\u6cd5\u3002\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cProgSG \u5c06\u8bbe\u8ba1\u6027\u80fd\u9884\u6d4b\u7684 RMSE \u964d\u4f4e\u4e86\u9ad8\u8fbe 22%\uff0c\u5e76\u4e14\u5728\u8bbe\u8ba1\u7a7a\u95f4\u63a2\u7d22 (DSE) \u4efb\u52a1\u4e2d\uff0c\u4e0e HARP \u548c AutoDSE \u76f8\u6bd4\uff0c\u5206\u522b\u4ee5\u5e73\u5747 1.10 \u500d\u548c 1.26 \u500d\uff08\u9ad8\u8fbe 8.17 \u500d\u548c 13.31 \u500d\uff09\u7684\u6027\u80fd\u6539\u8fdb\u8bc6\u522b\u8bbe\u8ba1\u3002</paragraph>", "author": "Zongyue Qin et.al.", "authors": "Zongyue Qin, Yunsheng Bai, Atefeh Sohrabizadeh, Zijian Ding, Ziniu Hu, Yizhou Sun, Jason Cong", "id": "2406.09606v2", "paper_url": "http://arxiv.org/abs/2406.09606v2", "repo": "null"}}