{"2412.07192": {"publish_time": "2024-12-10", "title": "PrisonBreak: Jailbreaking Large Language Models with Fewer Than Twenty-Five Targeted Bit-flips", "paper_summary": "We introduce a new class of attacks on commercial-scale (human-aligned)\nlanguage models that induce jailbreaking through targeted bitwise corruptions\nin model parameters. Our adversary can jailbreak billion-parameter language\nmodels with fewer than 25 bit-flips in all cases$-$and as few as 5 in\nsome$-$using up to 40$\\times$ less bit-flips than existing attacks on computer\nvision models at least 100$\\times$ smaller. Unlike prompt-based jailbreaks, our\nattack renders these models in memory 'uncensored' at runtime, allowing them to\ngenerate harmful responses without any input modifications. Our attack\nalgorithm efficiently identifies target bits to flip, offering up to 20$\\times$\nmore computational efficiency than previous methods. This makes it practical\nfor language models with billions of parameters. We show an end-to-end\nexploitation of our attack using software-induced fault injection, Rowhammer\n(RH). Our work examines 56 DRAM RH profiles from DDR4 and LPDDR4X devices with\ndifferent RH vulnerabilities. We show that our attack can reliably induce\njailbreaking in systems similar to those affected by prior bit-flip attacks.\nMoreover, our approach remains effective even against highly RH-secure systems\n(e.g., 46$\\times$ more secure than previously tested systems). Our analyses\nfurther reveal that: (1) models with less post-training alignment require fewer\nbit flips to jailbreak; (2) certain model components, such as value projection\nlayers, are substantially more vulnerable than others; and (3) our method is\nmechanistically different than existing jailbreaks. Our findings highlight a\npressing, practical threat to the language model ecosystem and underscore the\nneed for research to protect these models from bit-flip attacks.", "paper_summary_zh": "<paragraph>\u6211\u5011\u63d0\u51fa\u91dd\u5c0d\u5546\u7528\u898f\u6a21\uff08\u8207\u4eba\u985e\u4e00\u81f4\uff09\u8a9e\u8a00\u6a21\u578b\u7684\u65b0\u578b\u653b\u64ca\u985e\u578b\uff0c\u8a72\u985e\u578b\u901a\u904e\u6a21\u578b\u53c3\u6578\u4e2d\u7684\u76ee\u6a19\u6309\u4f4d\u5143\u640d\u58de\u4f86\u8a98\u767c\u8d8a\u7344\u3002\u6211\u5011\u7684\u5c0d\u624b\u53ef\u4ee5\u4f7f\u7528\u5c0f\u65bc 25 \u500b\u4f4d\u5143\u5143\u53cd\u8f49\uff08\u5728\u6240\u6709\u60c5\u6cc1\u4e0b\uff09\u4f86\u8d8a\u7344\u5341\u5104\u53c3\u6578\u8a9e\u8a00\u6a21\u578b\uff0c\u5728\u67d0\u4e9b\u60c5\u6cc1\u4e0b\u751a\u81f3\u53ef\u4ee5\u5c11\u81f3 5 \u500b\uff0c\u6bd4\u73fe\u6709\u653b\u64ca\u65b9\u6cd5\u4f7f\u7528\u7684\u4f4d\u5143\u5143\u53cd\u8f49\u5c11 40 \u500d\uff0c\u800c\u73fe\u6709\u653b\u64ca\u65b9\u6cd5\u91dd\u5c0d\u7684\u96fb\u8166\u8996\u89ba\u6a21\u578b\u81f3\u5c11\u5c0f 100 \u500d\u3002\u8207\u57fa\u65bc\u63d0\u793a\u7684\u8d8a\u7344\u4e0d\u540c\uff0c\u6211\u5011\u7684\u653b\u64ca\u5728\u57f7\u884c\u6642\u6703\u4f7f\u9019\u4e9b\u6a21\u578b\u5728\u8a18\u61b6\u9ad4\u4e2d\u300c\u4e0d\u53d7\u5be9\u67e5\u300d\uff0c\u8b93\u5b83\u5011\u7121\u9700\u4efb\u4f55\u8f38\u5165\u4fee\u6539\u5373\u53ef\u7522\u751f\u6709\u5bb3\u56de\u61c9\u3002\u6211\u5011\u7684\u653b\u64ca\u6f14\u7b97\u6cd5\u6709\u6548\u7387\u5730\u8b58\u5225\u8981\u53cd\u8f49\u7684\u76ee\u6a19\u4f4d\u5143\u5143\uff0c\u6bd4\u5148\u524d\u7684\u6f14\u7b97\u6cd5\u63d0\u4f9b\u9ad8\u9054 20 \u500d\u7684\u904b\u7b97\u6548\u7387\u3002\u9019\u4f7f\u5f97\u5b83\u9069\u7528\u65bc\u5177\u6709\u6578\u5341\u5104\u500b\u53c3\u6578\u7684\u8a9e\u8a00\u6a21\u578b\u3002\u6211\u5011\u5c55\u793a\u4e86\u4f7f\u7528\u8edf\u9ad4\u8a98\u767c\u6545\u969c\u6ce8\u5165 Rowhammer (RH) \u5c0d\u6211\u5011\u7684\u653b\u64ca\u9032\u884c\u7aef\u5230\u7aef\u5229\u7528\u3002\u6211\u5011\u7684\u7814\u7a76\u6aa2\u8996\u4e86\u4f86\u81ea DDR4 \u548c LPDDR4X \u88dd\u7f6e\u7684 56 \u500b DRAM RH \u8a2d\u5b9a\u6a94\uff0c\u9019\u4e9b\u88dd\u7f6e\u5177\u6709\u4e0d\u540c\u7684 RH \u6f0f\u6d1e\u3002\u6211\u5011\u5c55\u793a\u6211\u5011\u7684\u653b\u64ca\u53ef\u4ee5\u53ef\u9760\u5730\u8a98\u767c\u8207\u5148\u524d\u4f4d\u5143\u5143\u53cd\u8f49\u653b\u64ca\u5f71\u97ff\u7684\u7cfb\u7d71\u985e\u4f3c\u7684\u8d8a\u7344\u3002\u6b64\u5916\uff0c\u6211\u5011\u7684\u505a\u6cd5\u5373\u4f7f\u91dd\u5c0d\u9ad8\u5ea6 RH \u5b89\u5168\u7cfb\u7d71\uff08\u4f8b\u5982\uff0c\u6bd4\u5148\u524d\u6e2c\u8a66\u7684\u7cfb\u7d71\u5b89\u5168 46 \u500d\uff09\u4ecd\u7136\u6709\u6548\u3002\u6211\u5011\u7684\u5206\u6790\u9032\u4e00\u6b65\u63ed\u793a\uff1a(1) \u8a13\u7df4\u5f8c\u5c0d\u9f4a\u8f03\u5c11\u7684\u6a21\u578b\u9700\u8981\u8f03\u5c11\u7684\u4f4d\u5143\u5143\u53cd\u8f49\u624d\u80fd\u8d8a\u7344\uff1b(2) \u7279\u5b9a\u7684\u6a21\u578b\u7d44\u4ef6\uff08\u4f8b\u5982\u503c\u6295\u5f71\u5c64\uff09\u6bd4\u5176\u4ed6\u7d44\u4ef6\u5bb9\u6613\u53d7\u5230\u653b\u64ca\uff1b(3) \u6211\u5011\u7684\u6f14\u7b97\u6cd5\u5728\u6a5f\u5236\u4e0a\u8207\u73fe\u6709\u7684\u8d8a\u7344\u65b9\u5f0f\u4e0d\u540c\u3002\u6211\u5011\u7684\u767c\u73fe\u7a81\u986f\u4e86\u5c0d\u8a9e\u8a00\u6a21\u578b\u751f\u614b\u7cfb\u7d71\u7684\u8feb\u5207\u5be6\u969b\u5a01\u8105\uff0c\u4e26\u5f37\u8abf\u9700\u8981\u7814\u7a76\u4f86\u4fdd\u8b77\u9019\u4e9b\u6a21\u578b\u514d\u65bc\u4f4d\u5143\u5143\u53cd\u8f49\u653b\u64ca\u3002</paragraph>", "author": "Zachary Coalson et.al.", "authors": "Zachary Coalson, Jeonghyun Woo, Shiyang Chen, Yu Sun, Lishan Yang, Prashant Nair, Bo Fang, Sanghyun Hong", "id": "2412.07192v1", "paper_url": "http://arxiv.org/abs/2412.07192v1", "repo": "null"}}