{"2406.04693": {"publish_time": "2024-06-07", "title": "LLM-Vectorizer: LLM-based Verified Loop Vectorizer", "paper_summary": "Vectorization is a powerful optimization technique that significantly boosts\nthe performance of high performance computing applications operating on large\ndata arrays. Despite decades of research on auto-vectorization, compilers\nfrequently miss opportunities to vectorize code. On the other hand, writing\nvectorized code manually using compiler intrinsics is still a complex,\nerror-prone task that demands deep knowledge of specific architecture and\ncompilers.\n  In this paper, we evaluate the potential of large-language models (LLMs) to\ngenerate vectorized (Single Instruction Multiple Data) code from scalar\nprograms that process individual array elements. We propose a novel\nfinite-state machine multi-agents based approach that harnesses LLMs and\ntest-based feedback to generate vectorized code. Our findings indicate that\nLLMs are capable of producing high performance vectorized code with run-time\nspeedup ranging from 1.1x to 9.4x as compared to the state-of-the-art compilers\nsuch as Intel Compiler, GCC, and Clang.\n  To verify the correctness of vectorized code, we use Alive2, a leading\nbounded translation validation tool for LLVM IR. We describe a few\ndomain-specific techniques to improve the scalability of Alive2 on our\nbenchmark dataset. Overall, our approach is able to verify 38.2% of\nvectorizations as correct on the TSVC benchmark dataset.", "paper_summary_zh": "\u5411\u91cf\u5316\u662f\u4e00\u7a2e\u5f37\u5927\u7684\u6700\u4f73\u5316\u6280\u8853\uff0c\u80fd\u5927\u5e45\u63d0\u5347\u8655\u7406\u5927\u578b\u8cc7\u6599\u9663\u5217\u7684\u9ad8\u6548\u80fd\u904b\u7b97\u61c9\u7528\u7a0b\u5f0f\u6548\u80fd\u3002\u5118\u7ba1\u6578\u5341\u5e74\u4f86\u81ea\u52d5\u5411\u91cf\u5316\u7814\u7a76\u4e0d\u65b7\uff0c\u7de8\u8b6f\u5668\u7d93\u5e38\u932f\u5931\u5411\u91cf\u5316\u7a0b\u5f0f\u78bc\u7684\u6a5f\u6703\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u624b\u52d5\u4f7f\u7528\u7de8\u8b6f\u5668\u5167\u5efa\u51fd\u6578\u64b0\u5beb\u5411\u91cf\u5316\u7a0b\u5f0f\u78bc\u4ecd\u662f\u4e00\u9805\u8907\u96dc\u3001\u5bb9\u6613\u51fa\u932f\u7684\u4efb\u52d9\uff0c\u9700\u8981\u6df1\u5165\u4e86\u89e3\u7279\u5b9a\u67b6\u69cb\u548c\u7de8\u8b6f\u5668\u3002\n  \u5728\u672c\u6587\u4e2d\uff0c\u6211\u5011\u8a55\u4f30\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5c07\u8655\u7406\u500b\u5225\u9663\u5217\u5143\u7d20\u7684\u7d14\u91cf\u7a0b\u5f0f\u8f49\u63db\u70ba\u5411\u91cf\u5316 (\u55ae\u4e00\u6307\u4ee4\u591a\u91cd\u8cc7\u6599) \u7a0b\u5f0f\u78bc\u7684\u6f5b\u529b\u3002\u6211\u5011\u63d0\u51fa\u4e00\u500b\u65b0\u7a4e\u7684\u57fa\u65bc\u6709\u9650\u72c0\u614b\u6a5f\u7684\u591a\u4ee3\u7406\u4eba\u65b9\u6cd5\uff0c\u5229\u7528 LLM \u548c\u57fa\u65bc\u6e2c\u8a66\u7684\u56de\u994b\u7522\u751f\u5411\u91cf\u5316\u7a0b\u5f0f\u78bc\u3002\u6211\u5011\u7684\u7814\u7a76\u7d50\u679c\u8868\u660e\uff0c\u8207 Intel Compiler\u3001GCC \u548c Clang \u7b49\u6700\u5148\u9032\u7684\u7de8\u8b6f\u5668\u76f8\u6bd4\uff0cLLM \u80fd\u5920\u7522\u751f\u9ad8\u6027\u80fd\u5411\u91cf\u5316\u7a0b\u5f0f\u78bc\uff0c\u57f7\u884c\u6642\u9593\u52a0\u901f\u5f9e 1.1 \u500d\u5230 9.4 \u500d\u4e0d\u7b49\u3002\n  \u70ba\u4e86\u9a57\u8b49\u5411\u91cf\u5316\u7a0b\u5f0f\u78bc\u7684\u6b63\u78ba\u6027\uff0c\u6211\u5011\u4f7f\u7528 Alive2\uff0c\u9019\u662f\u4e00\u500b\u9818\u5148\u7684 LLVM IR \u7e6b\u7d50\u8f49\u8b6f\u9a57\u8b49\u5de5\u5177\u3002\u6211\u5011\u63cf\u8ff0\u4e86\u4e00\u4e9b\u7279\u5b9a\u9818\u57df\u7684\u6280\u8853\uff0c\u4ee5\u6539\u5584 Alive2 \u5728\u6211\u5011\u7684\u57fa\u6e96\u8cc7\u6599\u96c6\u4e0a\u7684\u53ef\u64f4\u5145\u6027\u3002\u7e3d\u9ad4\u800c\u8a00\uff0c\u6211\u5011\u7684\u65b9\u6cd5\u80fd\u5920\u5728 TSVC \u57fa\u6e96\u8cc7\u6599\u96c6\u4e0a\u9a57\u8b49 38.2% \u7684\u5411\u91cf\u5316\u6b63\u78ba\u7121\u8aa4\u3002", "author": "Jubi Taneja et.al.", "authors": "Jubi Taneja, Avery Laird, Cong Yan, Madan Musuvathi, Shuvendu K. Lahiri", "id": "2406.04693v1", "paper_url": "http://arxiv.org/abs/2406.04693v1", "repo": "null"}}