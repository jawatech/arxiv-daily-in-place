{"2406.07944": {"publish_time": "2024-06-12", "title": "DLLens: Testing Deep Learning Libraries via LLM-aided Synthesis", "paper_summary": "Testing is a major approach to ensuring the quality of deep learning (DL)\nlibraries. Existing testing techniques commonly adopt differential testing to\nrelieve the need for test oracle construction. However, these techniques are\nlimited in finding implementations that offer the same functionality and\ngenerating diverse test inputs for differential testing. This paper introduces\nDLLens, a novel differential testing technique for DL library testing. Our\ninsight is that APIs in different DL libraries are commonly designed to\naccomplish various computations for the same set of published DL algorithms.\nAlthough the mapping of these APIs is not often one-to-one, we observe that\ntheir computations can be mutually simulated after proper composition and\nadaptation. The use of these simulation counterparts facilitates differential\ntesting for the detection of functional DL library bugs. Leveraging the\ninsight, we propose DLLens as a novel mechanism that utilizes a large language\nmodel (LLM) to synthesize valid counterparts of DL library APIs. To generate\ndiverse test inputs, DLLens incorporates a static analysis method aided by LLM\nto extract path constraints from all execution paths in each API and its\ncounterpart's implementations. These path constraints are then used to guide\nthe generation of diverse test inputs. We evaluate DLLens on two popular DL\nlibraries, TensorFlow and PyTorch. Our evaluation shows that DLLens can\nsynthesize counterparts for more than twice as many APIs found by\nstate-of-the-art techniques on these libraries. Moreover, DLLens can extract\n26.7% more constraints and detect 2.5 times as many bugs as state-of-the-art\ntechniques. DLLens has successfully found 56 bugs in recent TensorFlow and\nPyTorch libraries. Among them, 41 are previously unknown, 39 of which have been\nconfirmed by developers after reporting, and 19 of those confirmed bugs have\nbeen fixed by developers.", "paper_summary_zh": "<paragraph>\u6e2c\u8a66\u662f\u78ba\u4fdd\u6df1\u5ea6\u5b78\u7fd2 (DL) \u51fd\u5f0f\u5eab\u54c1\u8cea\u7684\u4e3b\u8981\u65b9\u6cd5\u3002\u73fe\u6709\u7684\u6e2c\u8a66\u6280\u8853\u901a\u5e38\u63a1\u7528\u5dee\u7570\u6e2c\u8a66\u4f86\u6e1b\u8f15\u6e2c\u8a66\u9810\u8a00\u5efa\u69cb\u7684\u9700\u6c42\u3002\u7136\u800c\uff0c\u9019\u4e9b\u6280\u8853\u5728\u5c0b\u627e\u63d0\u4f9b\u76f8\u540c\u529f\u80fd\u548c\u7522\u751f\u5dee\u7570\u6e2c\u8a66\u7684\u591a\u6a23\u5316\u6e2c\u8a66\u8f38\u5165\u65b9\u9762\u53d7\u5230\u9650\u5236\u3002\u672c\u6587\u4ecb\u7d39 DLLens\uff0c\u4e00\u7a2e\u7528\u65bc DL \u51fd\u5f0f\u5eab\u6e2c\u8a66\u7684\u65b0\u7a4e\u5dee\u7570\u6e2c\u8a66\u6280\u8853\u3002\u6211\u5011\u7684\u898b\u89e3\u662f\uff0c\u4e0d\u540c DL \u51fd\u5f0f\u5eab\u4e2d\u7684 API \u901a\u5e38\u88ab\u8a2d\u8a08\u70ba\u91dd\u5c0d\u540c\u4e00\u7d44\u5df2\u767c\u5e03\u7684 DL \u6f14\u7b97\u6cd5\u57f7\u884c\u5404\u7a2e\u904b\u7b97\u3002\u5118\u7ba1\u9019\u4e9b API \u7684\u5c0d\u61c9\u901a\u5e38\u4e0d\u662f\u4e00\u5c0d\u4e00\u7684\uff0c\u4f46\u6211\u5011\u89c0\u5bdf\u5230\u5728\u9069\u7576\u7684\u7d44\u5408\u548c\u8abf\u6574\u5f8c\uff0c\u5b83\u5011\u7684\u904b\u7b97\u53ef\u4ee5\u76f8\u4e92\u6a21\u64ec\u3002\u4f7f\u7528\u9019\u4e9b\u6a21\u64ec\u5c0d\u61c9\u7269\u6709\u52a9\u65bc\u9032\u884c\u5dee\u7570\u6e2c\u8a66\uff0c\u4ee5\u5075\u6e2c\u529f\u80fd\u6027 DL \u51fd\u5f0f\u5eab\u932f\u8aa4\u3002\u5229\u7528\u6b64\u898b\u89e3\uff0c\u6211\u5011\u63d0\u51fa DLLens \u4f5c\u70ba\u4e00\u7a2e\u65b0\u7a4e\u7684\u6a5f\u5236\uff0c\u5b83\u5229\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u4f86\u7d9c\u5408 DL \u51fd\u5f0f\u5eab API \u7684\u6709\u6548\u5c0d\u61c9\u7269\u3002\u70ba\u4e86\u7522\u751f\u591a\u6a23\u5316\u7684\u6e2c\u8a66\u8f38\u5165\uff0cDLLens \u7d50\u5408\u4e86\u975c\u614b\u5206\u6790\u65b9\u6cd5\uff0c\u4e26\u501f\u52a9 LLM \u5f9e\u6bcf\u500b API \u53ca\u5176\u5c0d\u61c9\u5be6\u4f5c\u4e2d\u7684\u6240\u6709\u57f7\u884c\u8def\u5f91\u4e2d\u64f7\u53d6\u8def\u5f91\u7d04\u675f\u3002\u7136\u5f8c\u4f7f\u7528\u9019\u4e9b\u8def\u5f91\u7d04\u675f\u4f86\u5f15\u5c0e\u591a\u6a23\u5316\u6e2c\u8a66\u8f38\u5165\u7684\u7522\u751f\u3002\u6211\u5011\u5728\u5169\u500b\u6d41\u884c\u7684 DL \u51fd\u5f0f\u5eab TensorFlow \u548c PyTorch \u4e0a\u8a55\u4f30 DLLens\u3002\u6211\u5011\u7684\u8a55\u4f30\u986f\u793a\uff0cDLLens \u53ef\u4ee5\u70ba\u9019\u4e9b\u51fd\u5f0f\u5eab\u4e2d\u7531\u6700\u5148\u9032\u6280\u8853\u627e\u5230\u7684 API \u6578\u91cf\u7684\u5169\u500d\u4ee5\u4e0a\u7d9c\u5408\u5c0d\u61c9\u7269\u3002\u6b64\u5916\uff0cDLLens \u53ef\u4ee5\u64f7\u53d6\u591a 26.7% \u7684\u7d04\u675f\uff0c\u4e26\u5075\u6e2c\u591a 2.5 \u500d\u7684\u932f\u8aa4\uff0c\u5982\u540c\u6700\u5148\u9032\u7684\u6280\u8853\u3002DLLens \u5df2\u6210\u529f\u5728\u6700\u8fd1\u7684 TensorFlow \u548c PyTorch \u51fd\u5f0f\u5eab\u4e2d\u627e\u5230 56 \u500b\u932f\u8aa4\u3002\u5176\u4e2d\uff0c41 \u500b\u4ee5\u524d\u672a\u77e5\uff0c\u5728\u5831\u544a\u5f8c\u6709 39 \u500b\u5df2\u7372\u5f97\u958b\u767c\u4eba\u54e1\u78ba\u8a8d\uff0c\u800c\u9019\u4e9b\u5df2\u78ba\u8a8d\u7684\u932f\u8aa4\u4e2d\u6709 19 \u500b\u5df2\u7372\u5f97\u958b\u767c\u4eba\u54e1\u4fee\u5fa9\u3002</paragraph>", "author": "Meiziniu Li et.al.", "authors": "Meiziniu Li, Dongze Li, Jianmeng Liu, Jialun Cao, Yongqiang Tian, Shing-Chi Cheung", "id": "2406.07944v1", "paper_url": "http://arxiv.org/abs/2406.07944v1", "repo": "null"}}