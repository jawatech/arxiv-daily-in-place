{"2408.08779": {"publish_time": "2024-08-16", "title": "DAC: Decomposed Automation Correction for Text-to-SQL", "paper_summary": "Text-to-SQL is an important task that helps people obtain information from\ndatabases by automatically generating SQL queries. Considering the brilliant\nperformance, approaches based on Large Language Models (LLMs) become the\nmainstream for text-to-SQL. Among these approaches, automated correction is an\neffective approach that further enhances performance by correcting the mistakes\nin the generated results. The existing correction methods require LLMs to\ndirectly correct with generated SQL, while previous research shows that LLMs do\nnot know how to detect mistakes, leading to poor performance. Therefore, in\nthis paper, we propose to employ the decomposed correction to enhance\ntext-to-SQL performance. We first demonstrate that decomposed correction\noutperforms direct correction since detecting and fixing mistakes with the\nresults of the decomposed sub-tasks is easier than with SQL. Based on this\nanalysis, we introduce Decomposed Automation Correction (DAC), which corrects\nSQL by decomposing text-to-SQL into entity linking and skeleton parsing. DAC\nfirst generates the entity and skeleton corresponding to the question and then\ncompares the differences between the initial SQL and the generated entities and\nskeleton as feedback for correction. Experimental results show that our method\nimproves performance by $3.7\\%$ on average of Spider, Bird, and KaggleDBQA\ncompared with the baseline method, demonstrating the effectiveness of DAC.", "paper_summary_zh": "\u6587\u672c\u8f49 SQL \u662f\u4e00\u9805\u91cd\u8981\u7684\u4efb\u52d9\uff0c\u5b83\u53ef\u5354\u52a9\u4eba\u5011\u900f\u904e\u81ea\u52d5\u7522\u751f SQL \u67e5\u8a62\u4f86\u5f9e\u8cc7\u6599\u5eab\u53d6\u5f97\u8cc7\u8a0a\u3002\u8003\u91cf\u5230\u7d55\u4f73\u6548\u80fd\uff0c\u57fa\u65bc\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u7684\u65b9\u6cd5\u5df2\u6210\u70ba\u6587\u672c\u8f49 SQL \u7684\u4e3b\u6d41\u3002\u5728\u9019\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u81ea\u52d5\u66f4\u6b63\u662f\u4e00\u7a2e\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u5b83\u900f\u904e\u66f4\u6b63\u7522\u751f\u7d50\u679c\u4e2d\u7684\u932f\u8aa4\u9032\u4e00\u6b65\u63d0\u5347\u6548\u80fd\u3002\u73fe\u6709\u7684\u66f4\u6b63\u65b9\u6cd5\u8981\u6c42 LLM \u76f4\u63a5\u4f7f\u7528\u7522\u751f\u7684 SQL \u9032\u884c\u66f4\u6b63\uff0c\u800c\u5148\u524d\u7684\u7814\u7a76\u986f\u793a LLM \u4e0d\u77e5\u9053\u5982\u4f55\u5075\u6e2c\u932f\u8aa4\uff0c\u5c0e\u81f4\u6548\u80fd\u4e0d\u4f73\u3002\u56e0\u6b64\uff0c\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5011\u5efa\u8b70\u63a1\u7528\u5206\u89e3\u66f4\u6b63\u4f86\u63d0\u5347\u6587\u672c\u8f49 SQL \u7684\u6548\u80fd\u3002\u6211\u5011\u9996\u5148\u8b49\u660e\u5206\u89e3\u66f4\u6b63\u512a\u65bc\u76f4\u63a5\u66f4\u6b63\uff0c\u56e0\u70ba\u4f7f\u7528\u5206\u89e3\u5b50\u4efb\u52d9\u7684\u7d50\u679c\u4f86\u5075\u6e2c\u548c\u4fee\u6b63\u932f\u8aa4\u6bd4\u4f7f\u7528 SQL \u5bb9\u6613\u3002\u6839\u64da\u9019\u500b\u5206\u6790\uff0c\u6211\u5011\u5f15\u5165\u4e86\u5206\u89e3\u81ea\u52d5\u66f4\u6b63 (DAC)\uff0c\u5b83\u900f\u904e\u5c07\u6587\u672c\u8f49 SQL \u5206\u89e3\u70ba\u5be6\u9ad4\u9023\u7d50\u548c\u7d50\u69cb\u5256\u6790\u4f86\u66f4\u6b63 SQL\u3002DAC \u9996\u5148\u7522\u751f\u8207\u554f\u984c\u76f8\u7b26\u7684\u5be6\u9ad4\u548c\u7d50\u69cb\uff0c\u7136\u5f8c\u6bd4\u8f03\u521d\u59cb SQL \u8207\u7522\u751f\u7684\u5be6\u9ad4\u548c\u7d50\u69cb\u4e4b\u9593\u7684\u5dee\u7570\uff0c\u4f5c\u70ba\u66f4\u6b63\u7684\u56de\u994b\u3002\u5be6\u9a57\u7d50\u679c\u986f\u793a\uff0c\u8207\u57fa\u6e96\u65b9\u6cd5\u76f8\u6bd4\uff0c\u6211\u5011\u7684\u6a21\u578b\u5728 Spider\u3001Bird \u548c KaggleDBQA \u7684\u5e73\u5747\u6548\u80fd\u63d0\u5347\u4e86 3.7%\uff0c\u8b49\u660e\u4e86 DAC \u7684\u6709\u6548\u6027\u3002", "author": "Dingzirui Wang et.al.", "authors": "Dingzirui Wang, Longxu Dou, Xuanliang Zhang, Qingfu Zhu, Wanxiang Che", "id": "2408.08779v1", "paper_url": "http://arxiv.org/abs/2408.08779v1", "repo": "null"}}