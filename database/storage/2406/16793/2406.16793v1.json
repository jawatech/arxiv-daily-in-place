{"2406.16793": {"publish_time": "2024-06-24", "title": "Adam-mini: Use Fewer Learning Rates To Gain More", "paper_summary": "We propose Adam-mini, an optimizer that achieves on-par or better performance\nthan AdamW with 45% to 50% less memory footprint. Adam-mini reduces memory by\ncutting down the number of learning rates in Adam: Instead of assigning an\nindividual learning rate for each parameter using $1/\\sqrt{v}$, Adam-mini uses\nthe average of $v$ within a pre-defined parameter block as the learning rate\nfor that block. Such a design is inspired by two empirical findings. First, the\nHessian of Transformers exhibits a near-block diagonal structure with different\nsizes of dense sub-blocks. Second, for each of these dense sub-blocks, there\nexists a single high-quality learning rate that can outperform Adam, provided\nthat sufficient resources are available to search it out. Adam-mini provides\none cost-effective way to find these good learning rates and manage to cut down\n$\\geq 90% v$ in Adam. Empirically, we verify that Adam-mini performs on par or\nbetter than AdamW on various language models sized from 125M to 7B for\npre-training, supervised fine-tuning, and RLHF. The reduced memory footprint of\nAdam-mini also alleviates communication overheads among GPUs and CPUs, thereby\nincreasing throughput. For instance, Adam-mini achieves 49.6% higher throughput\nthan AdamW when pre-training Llama2-7B on 2x A800-80GB GPUs, which saves 33%\nwall-clock time for pre-training.", "paper_summary_zh": "\u6211\u5011\u63d0\u51fa Adam-mini\uff0c\u9019\u662f\u4e00\u7a2e\u512a\u5316\u5668\uff0c\u5176\u6548\u80fd\u8207 AdamW \u76f8\u7576\u6216\u66f4\u597d\uff0c\u4f46\u8a18\u61b6\u9ad4\u4f54\u7528\u91cf\u6e1b\u5c11 45% \u5230 50%\u3002Adam-mini \u900f\u904e\u6e1b\u5c11 Adam \u4e2d\u7684\u5b78\u7fd2\u7387\u6578\u91cf\u4f86\u6e1b\u5c11\u8a18\u61b6\u9ad4\uff1aAdam-mini \u4e0d\u4f7f\u7528 $1/\\sqrt{v}$ \u70ba\u6bcf\u500b\u53c3\u6578\u6307\u5b9a\u500b\u5225\u5b78\u7fd2\u7387\uff0c\u800c\u662f\u4f7f\u7528\u9810\u5148\u5b9a\u7fa9\u7684\u53c3\u6578\u5340\u584a\u5167\u7684 $v$ \u5e73\u5747\u503c\u4f5c\u70ba\u8a72\u5340\u584a\u7684\u5b78\u7fd2\u7387\u3002\u9019\u7a2e\u8a2d\u8a08\u7684\u9748\u611f\u4f86\u81ea\u5169\u500b\u7d93\u9a57\u767c\u73fe\u3002\u9996\u5148\uff0cTransformers \u7684 Hessian \u5448\u73fe\u51fa\u8fd1\u4f3c\u5340\u584a\u5c0d\u89d2\u7d50\u69cb\uff0c\u5177\u6709\u4e0d\u540c\u5927\u5c0f\u7684\u5bc6\u96c6\u5b50\u5340\u584a\u3002\u5176\u6b21\uff0c\u5c0d\u65bc\u9019\u4e9b\u5bc6\u96c6\u5b50\u5340\u584a\u4e2d\u7684\u6bcf\u4e00\u500b\uff0c\u90fd\u5b58\u5728\u4e00\u500b\u55ae\u4e00\u7684\u512a\u8cea\u5b78\u7fd2\u7387\uff0c\u53ea\u8981\u6709\u8db3\u5920\u7684\u8cc7\u6e90\u4f86\u641c\u5c0b\u5b83\uff0c\u5b83\u5c31\u80fd\u512a\u65bc Adam\u3002Adam-mini \u63d0\u4f9b\u4e86\u4e00\u7a2e\u7d93\u6fdf\u6709\u6548\u7684\u65b9\u6cd5\u4f86\u627e\u5230\u9019\u4e9b\u826f\u597d\u7684\u5b78\u7fd2\u7387\uff0c\u4e26\u8a2d\u6cd5\u5728 Adam \u4e2d\u6e1b\u5c11 $\\geq 90% v$\u3002\u6839\u64da\u7d93\u9a57\uff0c\u6211\u5011\u9a57\u8b49\u4e86 Adam-mini \u5728\u5404\u7a2e\u8a9e\u8a00\u6a21\u578b\u4e0a\u7684\u6548\u80fd\u8207 AdamW \u76f8\u7576\u6216\u66f4\u597d\uff0c\u9019\u4e9b\u8a9e\u8a00\u6a21\u578b\u7684\u5927\u5c0f\u5f9e 125M \u5230 7B\uff0c\u7528\u65bc\u9810\u8a13\u7df4\u3001\u76e3\u7763\u5fae\u8abf\u548c RLHF\u3002Adam-mini \u6e1b\u5c11\u7684\u8a18\u61b6\u9ad4\u4f54\u7528\u91cf\u4e5f\u6e1b\u8f15\u4e86 GPU \u548c CPU \u4e4b\u9593\u7684\u901a\u8a0a\u8ca0\u64d4\uff0c\u5f9e\u800c\u589e\u52a0\u4e86\u8655\u7406\u91cf\u3002\u4f8b\u5982\uff0c\u5728 2x A800-80GB GPU \u4e0a\u9810\u8a13\u7df4 Llama2-7B \u6642\uff0cAdam-mini \u7684\u8655\u7406\u91cf\u6bd4 AdamW \u9ad8\u51fa 49.6%\uff0c\u9019\u70ba\u9810\u8a13\u7df4\u7bc0\u7701\u4e86 33% \u7684\u5be6\u969b\u6642\u9593\u3002", "author": "Yushun Zhang et.al.", "authors": "Yushun Zhang, Congliang Chen, Ziniu Li, Tian Ding, Chenwei Wu, Yinyu Ye, Zhi-Quan Luo, Ruoyu Sun", "id": "2406.16793v1", "paper_url": "http://arxiv.org/abs/2406.16793v1", "repo": "null"}}