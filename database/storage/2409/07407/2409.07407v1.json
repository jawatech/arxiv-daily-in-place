{"2409.07407": {"publish_time": "2024-09-11", "title": "CLNX: Bridging Code and Natural Language for C/C++ Vulnerability-Contributing Commits Identification", "paper_summary": "Large Language Models (LLMs) have shown great promise in vulnerability\nidentification. As C/C++ comprises half of the Open-Source Software (OSS)\nvulnerabilities over the past decade and updates in OSS mainly occur through\ncommits, enhancing LLMs' ability to identify C/C++ Vulnerability-Contributing\nCommits (VCCs) is essential. However, current studies primarily focus on\nfurther pre-training LLMs on massive code datasets, which is resource-intensive\nand poses efficiency challenges. In this paper, we enhance the ability of\nBERT-based LLMs to identify C/C++ VCCs in a lightweight manner. We propose\nCodeLinguaNexus (CLNX) as a bridge facilitating communication between C/C++\nprograms and LLMs. Based on commits, CLNX efficiently converts the source code\ninto a more natural representation while preserving key details. Specifically,\nCLNX first applies structure-level naturalization to decompose complex\nprograms, followed by token-level naturalization to interpret complex symbols.\nWe evaluate CLNX on public datasets of 25,872 C/C++ functions with their\ncommits. The results show that CLNX significantly enhances the performance of\nLLMs on identifying C/C++ VCCs. Moreover, CLNX-equipped CodeBERT achieves new\nstate-of-the-art and identifies 38 OSS vulnerabilities in the real world.", "paper_summary_zh": "\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5728\u6f0f\u6d1e\u8b58\u5225\u65b9\u9762\u5c55\u73fe\u51fa\u6975\u5927\u7684\u524d\u666f\u3002\u7531\u65bc C/C++ \u6db5\u84cb\u4e86\u904e\u53bb\u5341\u5e74\u4e2d\u4e00\u534a\u7684\u958b\u6e90\u8edf\u9ad4 (OSS) \u6f0f\u6d1e\uff0c\u800c OSS \u66f4\u65b0\u4e3b\u8981\u900f\u904e\u63d0\u4ea4\u9032\u884c\uff0c\u56e0\u6b64\u63d0\u5347 LLM \u8b58\u5225 C/C++ \u6f0f\u6d1e\u8ca2\u737b\u63d0\u4ea4 (VCC) \u7684\u80fd\u529b\u81f3\u95dc\u91cd\u8981\u3002\u7136\u800c\uff0c\u76ee\u524d\u7684\u7814\u7a76\u4e3b\u8981\u96c6\u4e2d\u65bc\u5728\u5927\u91cf\u7684\u7a0b\u5f0f\u78bc\u8cc7\u6599\u96c6\u4e0a\u9032\u4e00\u6b65\u9810\u8a13\u7df4 LLM\uff0c\u9019\u9700\u8981\u5927\u91cf\u7684\u8cc7\u6e90\u4e14\u6703\u9020\u6210\u6548\u7387\u65b9\u9762\u7684\u6311\u6230\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5011\u4ee5\u8f15\u91cf\u5316\u7684\u65b9\u5f0f\u63d0\u5347 BERT-based LLM \u8b58\u5225 C/C++ VCC \u7684\u80fd\u529b\u3002\u6211\u5011\u63d0\u51fa CodeLinguaNexus (CLNX) \u4f5c\u70ba\u4fc3\u9032 C/C++ \u7a0b\u5f0f\u8207 LLM \u4e4b\u9593\u6e9d\u901a\u7684\u6a4b\u6a11\u3002CLNX \u57fa\u65bc\u63d0\u4ea4\uff0c\u5c07\u539f\u59cb\u7a0b\u5f0f\u78bc\u6709\u6548\u5730\u8f49\u63db\u70ba\u66f4\u81ea\u7136\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u540c\u6642\u4fdd\u7559\u95dc\u9375\u7d30\u7bc0\u3002\u5177\u9ad4\u4f86\u8aaa\uff0cCLNX \u9996\u5148\u61c9\u7528\u7d50\u69cb\u5c64\u6b21\u81ea\u7136\u5316\u4f86\u5206\u89e3\u8907\u96dc\u7684\u7a0b\u5f0f\uff0c\u7136\u5f8c\u61c9\u7528\u4ee3\u78bc\u5c64\u6b21\u81ea\u7136\u5316\u4f86\u89e3\u91cb\u8907\u96dc\u7684\u7b26\u865f\u3002\u6211\u5011\u5728\u5305\u542b 25,872 \u500b C/C++ \u51fd\u6578\u53ca\u5176\u63d0\u4ea4\u7684\u516c\u958b\u8cc7\u6599\u96c6\u4e0a\u8a55\u4f30 CLNX\u3002\u7d50\u679c\u986f\u793a\uff0cCLNX \u5927\u5e45\u63d0\u5347 LLM \u8b58\u5225 C/C++ VCC \u7684\u6548\u80fd\u3002\u6b64\u5916\uff0c\u914d\u5099 CLNX \u7684 CodeBERT \u9054\u5230\u65b0\u7684\u6280\u8853\u6c34\u6e96\uff0c\u4e26\u5728\u771f\u5be6\u4e16\u754c\u4e2d\u8b58\u5225\u51fa 38 \u500b OSS \u6f0f\u6d1e\u3002", "author": "Zeqing Qin et.al.", "authors": "Zeqing Qin, Yiwei Wu, Lansheng Han", "id": "2409.07407v1", "paper_url": "http://arxiv.org/abs/2409.07407v1", "repo": "null"}}