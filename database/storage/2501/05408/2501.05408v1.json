{"2501.05408": {"publish_time": "2025-01-09", "title": "TimeRL: Efficient Deep Reinforcement Learning with Polyhedral Dependence Graphs", "paper_summary": "Modern deep learning (DL) workloads increasingly use complex deep\nreinforcement learning (DRL) algorithms that generate training data within the\nlearning loop. This results in programs with several nested loops and dynamic\ndata dependencies between tensors. While DL systems with eager execution\nsupport such dynamism, they lack the optimizations and smart scheduling of\ngraph-based execution. Graph-based execution, however, cannot express dynamic\ntensor shapes, instead requiring the use of multiple static subgraphs. Either\nexecution model for DRL thus leads to redundant computation, reduced\nparallelism, and less efficient memory management.\n  We describe TimeRL, a system for executing dynamic DRL programs that combines\nthe dynamism of eager execution with the whole-program optimizations and\nscheduling of graph-based execution. TimeRL achieves this by introducing the\ndeclarative programming model of recurrent tensors, which allows users to\ndefine dynamic dependencies as intuitive recurrence equations. TimeRL\ntranslates recurrent tensors into a polyhedral dependence graph (PDG) with\ndynamic dependencies as symbolic expressions. Through simple PDG\ntransformations, TimeRL applies whole-program optimizations, such as automatic\nvectorization, incrementalization, and operator fusion. The PDG also allows for\nthe computation of an efficient program-wide execution schedule, which decides\non buffer deallocations, buffer donations, and GPU/CPU memory swapping. We show\nthat TimeRL executes current DRL algorithms up to 47$\\times$ faster than\nexisting DRL systems, while using 16$\\times$ less GPU peak memory.", "paper_summary_zh": "\u73fe\u4ee3\u6df1\u5ea6\u5b78\u7fd2 (DL) \u5de5\u4f5c\u8ca0\u8f09\u65e5\u76ca\u4f7f\u7528\u8907\u96dc\u7684\u6df1\u5ea6\u5f37\u5316\u5b78\u7fd2 (DRL) \u6f14\u7b97\u6cd5\uff0c\u5728\u5b78\u7fd2\u8ff4\u5708\u4e2d\u7522\u751f\u8a13\u7df4\u8cc7\u6599\u3002\u9019\u6703\u7522\u751f\u5177\u6709\u591a\u500b\u5de2\u72c0\u8ff4\u5708\u548c\u5f35\u91cf\u4e4b\u9593\u52d5\u614b\u8cc7\u6599\u76f8\u4f9d\u6027\u7684\u7a0b\u5f0f\u3002\u96d6\u7136\u5177\u6709\u71b1\u5207\u57f7\u884c\u529f\u80fd\u7684 DL \u7cfb\u7d71\u652f\u63f4\u9019\u7a2e\u52d5\u614b\u6027\uff0c\u4f46\u5b83\u5011\u7f3a\u4e4f\u5716\u5f62\u5316\u57f7\u884c\u6700\u4f73\u5316\u548c\u667a\u6167\u5316\u6392\u7a0b\u3002\u7136\u800c\uff0c\u5716\u5f62\u5316\u57f7\u884c\u7121\u6cd5\u8868\u9054\u52d5\u614b\u5f35\u91cf\u5f62\u72c0\uff0c\u53cd\u800c\u9700\u8981\u4f7f\u7528\u591a\u500b\u975c\u614b\u5b50\u5716\u5f62\u3002\u56e0\u6b64\uff0cDRL \u7684\u4efb\u4e00\u57f7\u884c\u6a21\u578b\u90fd\u6703\u5c0e\u81f4\u91cd\u8907\u904b\u7b97\u3001\u964d\u4f4e\u4e26\u884c\u5ea6\u548c\u8a18\u61b6\u9ad4\u7ba1\u7406\u6548\u7387\u4e0d\u5f70\u3002\n\u6211\u5011\u63cf\u8ff0 TimeRL\uff0c\u9019\u662f\u4e00\u500b\u7528\u65bc\u57f7\u884c\u52d5\u614b DRL \u7a0b\u5f0f\u7684\u7cfb\u7d71\uff0c\u5b83\u7d50\u5408\u4e86\u71b1\u5207\u57f7\u884c\u7684\u52d5\u614b\u6027\u8207\u5716\u5f62\u5316\u57f7\u884c\u7684\u5168\u7a0b\u5f0f\u6700\u4f73\u5316\u548c\u6392\u7a0b\u3002TimeRL \u900f\u904e\u5f15\u5165\u905e\u8ff4\u5f35\u91cf\u7684\u5ba3\u544a\u5f0f\u7a0b\u5f0f\u8a2d\u8a08\u6a21\u578b\u4f86\u9054\u6210\u6b64\u4e00\u76ee\u6a19\uff0c\u4f7f\u7528\u6236\u80fd\u5920\u5c07\u52d5\u614b\u76f8\u4f9d\u6027\u5b9a\u7fa9\u70ba\u76f4\u89ba\u7684\u905e\u8ff4\u65b9\u7a0b\u5f0f\u3002TimeRL \u5c07\u905e\u8ff4\u5f35\u91cf\u8f49\u63db\u70ba\u5177\u6709\u52d5\u614b\u76f8\u4f9d\u6027\uff08\u4f5c\u70ba\u7b26\u865f\u8868\u9054\u5f0f\uff09\u7684\u591a\u9762\u9ad4\u76f8\u4f9d\u5716\u5f62 (PDG)\u3002\u900f\u904e\u7c21\u55ae\u7684 PDG \u8f49\u63db\uff0cTimeRL \u5957\u7528\u5168\u7a0b\u5f0f\u6700\u4f73\u5316\uff0c\u4f8b\u5982\u81ea\u52d5\u5411\u91cf\u5316\u3001\u905e\u589e\u5316\u548c\u904b\u7b97\u5b50\u878d\u5408\u3002PDG \u4e5f\u5141\u8a31\u8a08\u7b97\u51fa\u6709\u6548\u7684\u5168\u7a0b\u5f0f\u57f7\u884c\u6392\u7a0b\uff0c\u6c7a\u5b9a\u7de9\u885d\u5340\u53d6\u6d88\u914d\u7f6e\u3001\u7de9\u885d\u5340\u6350\u8d08\u548c GPU/CPU \u8a18\u61b6\u9ad4\u4ea4\u63db\u3002\u6211\u5011\u986f\u793a TimeRL \u57f7\u884c\u76ee\u524d\u7684 DRL \u6f14\u7b97\u6cd5\u901f\u5ea6\u6bd4\u73fe\u6709\u7684 DRL \u7cfb\u7d71\u5feb\u9054 47 \u500d\uff0c\u540c\u6642\u4f7f\u7528\u5c11 16 \u500d\u7684 GPU \u5cf0\u503c\u8a18\u61b6\u9ad4\u3002", "author": "Pedro F. Silvestre et.al.", "authors": "Pedro F. Silvestre, Peter Pietzuch", "id": "2501.05408v1", "paper_url": "http://arxiv.org/abs/2501.05408v1", "repo": "null"}}