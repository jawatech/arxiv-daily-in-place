{"2410.17732": {"publish_time": "2024-10-23", "title": "FuzzWiz -- Fuzzing Framework for Efficient Hardware Coverage", "paper_summary": "Ever-increasing design complexity of System-on-Chips (SoCs) led to\nsignificant verification challenges. Unlike software, bugs in hardware design\nare vigorous and eternal i.e., once the hardware is fabricated, it cannot be\nrepaired with any patch. Despite being one of the powerful techniques used in\nverification, the dynamic random approach cannot give confidence to complex\nRegister Transfer Leve (RTL) designs during the pre-silicon design phase. In\nparticular, achieving coverage targets and exposing bugs is a complicated task\nwith random simulations. In this paper, we leverage an existing testing\nsolution available in the software world known as fuzzing and apply it to\nhardware verification in order to achieve coverage targets in quick time. We\ncreated an automated hardware fuzzing framework FuzzWiz using metamodeling and\nPython to achieve coverage goals faster. It includes parsing the RTL design\nmodule, converting it into C/C++ models, creating generic testbench with\nassertions, fuzzer-specific compilation, linking, and fuzzing. Furthermore, it\nis configurable and provides the debug flow if any crash is detected during the\nfuzzing process. The proposed framework is applied on four IP blocks from\nGoogle's OpenTitan chip with various fuzzing engines to show its scalability\nand compatibility. Our benchmarking results show that we could achieve around\n90% of the coverage 10 times faster than traditional simulation regression\nbased approach.", "paper_summary_zh": "\u7cfb\u7d71\u55ae\u6676\u7247 (SoC) \u65e5\u76ca\u589e\u52a0\u7684\u8a2d\u8a08\u8907\u96dc\u5ea6\uff0c\u5c0e\u81f4\u4e86\u56b4\u5cfb\u7684\u9a57\u8b49\u6311\u6230\u3002\u8207\u8edf\u9ad4\u4e0d\u540c\uff0c\u786c\u9ad4\u8a2d\u8a08\u4e2d\u7684\u932f\u8aa4\u662f\u5f37\u52c1\u4e14\u6c38\u4e45\u7684\uff0c\u4ea6\u5373\u786c\u9ad4\u4e00\u65e6\u88fd\u9020\u5b8c\u6210\uff0c\u5c31\u7121\u6cd5\u7528\u4efb\u4f55\u88dc\u4e01\u4fee\u5fa9\u3002\u5118\u7ba1\u52d5\u614b\u96a8\u6a5f\u65b9\u6cd5\u662f\u9a57\u8b49\u4e2d\u4f7f\u7528\u7684\u4e00\u7a2e\u5f37\u5927\u6280\u8853\uff0c\u4f46\u5b83\u7121\u6cd5\u5728\u77fd\u524d\u8a2d\u8a08\u968e\u6bb5\u8b93\u8907\u96dc\u7684\u66ab\u5b58\u5668\u50b3\u8f38\u5c64\u7d1a (RTL) \u8a2d\u8a08\u5145\u6eff\u4fe1\u5fc3\u3002\u7279\u5225\u662f\uff0c\u5728\u96a8\u6a5f\u6a21\u64ec\u4e2d\uff0c\u9054\u6210\u8986\u84cb\u7387\u76ee\u6a19\u4e26\u63ed\u9732\u932f\u8aa4\u662f\u4e00\u9805\u8907\u96dc\u7684\u4efb\u52d9\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5011\u5229\u7528\u8edf\u9ad4\u4e16\u754c\u4e2d\u73fe\u6709\u7684\u6e2c\u8a66\u89e3\u6c7a\u65b9\u6848\uff0c\u7a31\u70ba\u6a21\u7cca\u6e2c\u8a66\uff0c\u4e26\u5c07\u5176\u61c9\u7528\u65bc\u786c\u9ad4\u9a57\u8b49\uff0c\u4ee5\u4fbf\u5728\u77ed\u6642\u9593\u5167\u9054\u6210\u8986\u84cb\u7387\u76ee\u6a19\u3002\u6211\u5011\u4f7f\u7528\u5143\u5efa\u6a21\u548c Python \u5efa\u7acb\u4e86\u4e00\u500b\u81ea\u52d5\u5316\u786c\u9ad4\u6a21\u7cca\u6e2c\u8a66\u67b6\u69cb FuzzWiz\uff0c\u4ee5\u66f4\u5feb\u9054\u6210\u8986\u84cb\u7387\u76ee\u6a19\u3002\u5b83\u5305\u62ec\u5256\u6790 RTL \u8a2d\u8a08\u6a21\u7d44\u3001\u5c07\u5176\u8f49\u63db\u70ba C/C++ \u6a21\u578b\u3001\u5efa\u7acb\u5e36\u6709\u65b7\u8a00\u7684\u901a\u7528\u6e2c\u8a66\u5e73\u53f0\u3001\u6a21\u7cca\u6e2c\u8a66\u5668\u5c08\u7528\u7684\u7de8\u8b6f\u3001\u9023\u7d50\u548c\u6a21\u7cca\u6e2c\u8a66\u3002\u6b64\u5916\uff0c\u5b83\u5177\u6709\u53ef\u8a2d\u5b9a\u6027\uff0c\u4e26\u5728\u6a21\u7cca\u6e2c\u8a66\u904e\u7a0b\u4e2d\u5075\u6e2c\u5230\u4efb\u4f55\u5d29\u6f70\u6642\u63d0\u4f9b\u9664\u932f\u6d41\u7a0b\u3002\u6240\u63d0\u51fa\u7684\u67b6\u69cb\u61c9\u7528\u5728 Google \u7684 OpenTitan \u6676\u7247\u7684\u56db\u500b IP \u5340\u584a\u4e0a\uff0c\u4e26\u4f7f\u7528\u5404\u7a2e\u6a21\u7cca\u6e2c\u8a66\u5f15\u64ce\u4f86\u5c55\u793a\u5176\u53ef\u64f4\u5145\u6027\u548c\u76f8\u5bb9\u6027\u3002\u6211\u5011\u7684\u57fa\u6e96\u6e2c\u8a66\u7d50\u679c\u986f\u793a\uff0c\u6211\u5011\u80fd\u5920\u6bd4\u50b3\u7d71\u7684\u6a21\u64ec\u56de\u6b78\u6e2c\u8a66\u65b9\u6cd5\u5feb 10 \u500d\uff0c\u9054\u6210\u5927\u7d04 90% \u7684\u8986\u84cb\u7387\u3002", "author": "Deepak Narayan Gadde et.al.", "authors": "Deepak Narayan Gadde, Aman Kumar, Djones Lettnin, Sebastian Simon", "id": "2410.17732v1", "paper_url": "http://arxiv.org/abs/2410.17732v1", "repo": "null"}}