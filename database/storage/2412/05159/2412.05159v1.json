{"2412.05159": {"publish_time": "2024-12-06", "title": "Enhancing Cross-Language Code Translation via Task-Specific Embedding Alignment in Retrieval-Augmented Generation", "paper_summary": "We introduce a novel method to enhance cross-language code translation from\nFortran to C++ by integrating task-specific embedding alignment into a\nRetrieval-Augmented Generation (RAG) framework. Unlike conventional retrieval\napproaches that utilize generic embeddings agnostic to the downstream task, our\nstrategy aligns the retrieval model directly with the objective of maximizing\ntranslation quality, as quantified by the CodeBLEU metric. This alignment\nensures that the embeddings are semantically and syntactically meaningful for\nthe specific code translation task. Our methodology involves constructing a\ndataset of 25,000 Fortran code snippets sourced from Stack-V2 dataset and\ngenerating their corresponding C++ translations using the LLaMA 3.1-8B language\nmodel. We compute pairwise CodeBLEU scores between the generated translations\nand ground truth examples to capture fine-grained similarities. These scores\nserve as supervision signals in a contrastive learning framework, where we\noptimize the embedding model to retrieve Fortran-C++ pairs that are most\nbeneficial for improving the language model's translation performance. By\nintegrating these CodeBLEU-optimized embeddings into the RAG framework, our\napproach significantly enhances both retrieval accuracy and code generation\nquality over methods employing generic embeddings. On the HPC Fortran2C++\ndataset, our method elevates the average CodeBLEU score from 0.64 to 0.73,\nachieving a 14% relative improvement. On the Numerical Recipes dataset, we\nobserve an increase from 0.52 to 0.60, marking a 15% relative improvement.\nImportantly, these gains are realized without any fine-tuning of the language\nmodel, underscoring the efficiency and practicality of our approach.", "paper_summary_zh": "<paragraph>\u6211\u5011\u63d0\u51fa\u4e86\u4e00\u7a2e\u5275\u65b0\u7684\u65b9\u6cd5\uff0c\u900f\u904e\u5c07\u7279\u5b9a\u4efb\u52d9\u5d4c\u5165\u5f0f\u5c0d\u9f4a\u6574\u5408\u5230\u6aa2\u7d22\u589e\u5f37\u751f\u6210 (RAG) \u67b6\u69cb\u4e2d\uff0c\u4f86\u589e\u5f37 Fortran \u5230 C++ \u7684\u8de8\u8a9e\u8a00\u7a0b\u5f0f\u78bc\u7ffb\u8b6f\u3002\u8207\u5229\u7528\u8207\u4e0b\u6e38\u4efb\u52d9\u7121\u95dc\u7684\u4e00\u822c\u5d4c\u5165\u5f0f\u7684\u50b3\u7d71\u6aa2\u7d22\u65b9\u6cd5\u4e0d\u540c\uff0c\u6211\u5011\u7684\u7b56\u7565\u76f4\u63a5\u5c07\u6aa2\u7d22\u6a21\u578b\u8207\u6700\u5927\u5316\u7ffb\u8b6f\u54c1\u8cea\u7684\u76ee\u6a19\u5c0d\u9f4a\uff0c\u4ee5 CodeBLEU \u6307\u6a19\u91cf\u5316\u3002\u9019\u7a2e\u5c0d\u9f4a\u78ba\u4fdd\u5d4c\u5165\u5f0f\u5c0d\u65bc\u7279\u5b9a\u7684\u7a0b\u5f0f\u78bc\u7ffb\u8b6f\u4efb\u52d9\u5728\u8a9e\u7fa9\u548c\u8a9e\u6cd5\u4e0a\u5177\u6709\u610f\u7fa9\u3002\u6211\u5011\u7684\u505a\u6cd5\u5305\u62ec\u5efa\u69cb\u4e00\u500b\u8cc7\u6599\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u5f9e Stack-V2 \u8cc7\u6599\u96c6\u53d6\u5f97\u7684 25,000 \u500b Fortran \u7a0b\u5f0f\u78bc\u7247\u6bb5\uff0c\u4e26\u4f7f\u7528 LLaMA 3.1-8B \u8a9e\u8a00\u6a21\u578b\u7522\u751f\u5176\u5c0d\u61c9\u7684 C++ \u7ffb\u8b6f\u3002\u6211\u5011\u8a08\u7b97\u7522\u751f\u7684\u7ffb\u8b6f\u8207\u57fa\u672c\u5be6\u4f8b\u4e4b\u9593\u6210\u5c0d\u7684 CodeBLEU \u5206\u6578\uff0c\u4ee5\u64f7\u53d6\u7d30\u5fae\u7684\u76f8\u4f3c\u6027\u3002\u9019\u4e9b\u5206\u6578\u5728\u5c0d\u6bd4\u5b78\u7fd2\u67b6\u69cb\u4e2d\u4f5c\u70ba\u76e3\u7763\u8a0a\u865f\uff0c\u6211\u5011\u5728\u5176\u4e2d\u6700\u4f73\u5316\u5d4c\u5165\u5f0f\u6a21\u578b\uff0c\u4ee5\u6aa2\u7d22\u5c0d\u6539\u5584\u8a9e\u8a00\u6a21\u578b\u7ffb\u8b6f\u6548\u80fd\u6700\u6709\u5e6b\u52a9\u7684 Fortran-C++ \u5c0d\u3002\u900f\u904e\u5c07\u9019\u4e9b CodeBLEU \u6700\u4f73\u5316\u7684\u5d4c\u5165\u5f0f\u6574\u5408\u5230 RAG \u67b6\u69cb\u4e2d\uff0c\u6211\u5011\u7684\u65b9\u6cd5\u986f\u8457\u63d0\u5347\u4e86\u6aa2\u7d22\u6e96\u78ba\u5ea6\u548c\u7a0b\u5f0f\u78bc\u7522\u751f\u54c1\u8cea\uff0c\u8d85\u8d8a\u4e86\u4f7f\u7528\u4e00\u822c\u5d4c\u5165\u5f0f\u7684\u5176\u4ed6\u65b9\u6cd5\u3002\u5728 HPC Fortran2C++ \u8cc7\u6599\u96c6\u4e0a\uff0c\u6211\u5011\u7684\u65b9\u6cd5\u5c07\u5e73\u5747 CodeBLEU \u5206\u6578\u5f9e 0.64 \u63d0\u5347\u5230 0.73\uff0c\u9054\u5230\u4e86 14% \u7684\u76f8\u5c0d\u6539\u5584\u3002\u5728 Numerical Recipes \u8cc7\u6599\u96c6\u4e0a\uff0c\u6211\u5011\u89c0\u5bdf\u5230\u5f9e 0.52 \u63d0\u5347\u5230 0.60\uff0c\u6a19\u8a8c\u8457 15% \u7684\u76f8\u5c0d\u6539\u5584\u3002\u91cd\u8981\u7684\u662f\uff0c\u9019\u4e9b\u589e\u76ca\u662f\u5728\u672a\u5c0d\u8a9e\u8a00\u6a21\u578b\u9032\u884c\u4efb\u4f55\u5fae\u8abf\u7684\u60c5\u6cc1\u4e0b\u5be6\u73fe\u7684\uff0c\u9019\u51f8\u986f\u4e86\u6211\u5011\u65b9\u6cd5\u7684\u6548\u7387\u548c\u5be6\u7528\u6027\u3002</paragraph>", "author": "Manish Bhattarai et.al.", "authors": "Manish Bhattarai, Minh Vu, Javier E. Santos, Ismael Boureima, Daniel O' Malley", "id": "2412.05159v1", "paper_url": "http://arxiv.org/abs/2412.05159v1", "repo": "null"}}