{"2410.21673": {"publish_time": "2024-10-29", "title": "Knowledge-Guided Prompt Learning for Request Quality Assurance in Public Code Review", "paper_summary": "Public Code Review (PCR) is an assistant to the internal code review of the\ndevelopment team, in the form of a public Software Question Answering (SQA)\ncommunity, to help developers access high-quality and efficient review\nservices. Current methods on PCR mainly focus on the reviewer's perspective,\nincluding finding a capable reviewer, predicting comment quality, and\nrecommending/generating review comments. However, it is not well studied that\nhow to satisfy the review necessity requests posted by developers which can\nincrease their visibility, which in turn acts as a prerequisite for better\nreview responses. To this end, we propose a Knowledge-guided Prompt learning\nfor Public Code Review (KP-PCR) to achieve developer-based code review request\nquality assurance (i.e., predicting request necessity and recommending tags\nsubtask). Specifically, we reformulate the two subtasks via 1) text prompt\ntuning which converts both of them into a Masked Language Model (MLM) by\nconstructing prompt templates using hard prompt; 2) knowledge and code prefix\ntuning which introduces external knowledge by soft prompt, and uses data flow\ndiagrams to characterize code snippets. Finally, both of the request necessity\nprediction and tag recommendation subtasks output predicted results through an\nanswer engineering module. In addition, we further analysis the time complexity\nof our KP-PCR that has lightweight prefix based the operation of introducing\nknowledge. Experimental results on the PCR dataset for the period 2011-2023\ndemonstrate that our KP-PCR outperforms baselines by 8.3%-28.8% in the request\nnecessity prediction and by 0.1%-29.5% in the tag recommendation. The code\nimplementation is released at https://github.com/WUT-IDEA/KP-PCR.", "paper_summary_zh": "\u516c\u5171\u7a0b\u5f0f\u78bc\u5be9\u67e5 (PCR) \u662f\u4e00\u7a2e\u516c\u958b\u8edf\u9ad4\u554f\u7b54 (SQA) \u793e\u7fa4\u5f62\u5f0f\u7684\u5167\u90e8\u7a0b\u5f0f\u78bc\u5be9\u67e5\u52a9\u7406\uff0c\u5354\u52a9\u958b\u767c\u4eba\u54e1\u5b58\u53d6\u9ad8\u54c1\u8cea\u4e14\u6709\u6548\u7684\u5be9\u67e5\u670d\u52d9\u3002PCR \u76ee\u524d\u7684\u4e3b\u8981\u95dc\u6ce8\u9ede\u5728\u65bc\u5be9\u67e5\u8005\u7684\u89c0\u9ede\uff0c\u5305\u62ec\u5c0b\u627e\u6709\u80fd\u529b\u7684\u5be9\u67e5\u8005\u3001\u9810\u6e2c\u8a55\u8ad6\u54c1\u8cea\uff0c\u4ee5\u53ca\u5efa\u8b70/\u7522\u751f\u5be9\u67e5\u8a55\u8ad6\u3002\u4e0d\u904e\uff0c\u5c0d\u65bc\u5982\u4f55\u6eff\u8db3\u958b\u767c\u4eba\u54e1\u767c\u5e03\u7684\u5be9\u67e5\u5fc5\u8981\u6027\u8981\u6c42\uff0c\u9032\u800c\u589e\u52a0\u5176\u53ef\u898b\u5ea6\uff0c\u9032\u800c\u6210\u70ba\u7372\u5f97\u66f4\u4f73\u5be9\u67e5\u56de\u61c9\u7684\u5148\u6c7a\u689d\u4ef6\uff0c\u76ee\u524d\u5c1a\u672a\u6709\u6df1\u5165\u7684\u7814\u7a76\u3002\u70ba\u6b64\uff0c\u6211\u5011\u63d0\u51fa\u77e5\u8b58\u5f15\u5c0e\u63d0\u793a\u5b78\u7fd2\uff0c\u7528\u65bc\u516c\u5171\u7a0b\u5f0f\u78bc\u5be9\u67e5 (KP-PCR)\uff0c\u4ee5\u9054\u6210\u57fa\u65bc\u958b\u767c\u4eba\u54e1\u7684\u7a0b\u5f0f\u78bc\u5be9\u67e5\u8981\u6c42\u54c1\u8cea\u4fdd\u8b49\uff08\u5373\u9810\u6e2c\u8981\u6c42\u5fc5\u8981\u6027\u4e26\u5efa\u8b70\u6a19\u7c64\u5b50\u4efb\u52d9\uff09\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u900f\u904e 1) \u6587\u5b57\u63d0\u793a\u8abf\u6574\uff0c\u5c07\u5169\u500b\u5b50\u4efb\u52d9\u8f49\u63db\u70ba\u906e\u853d\u8a9e\u8a00\u6a21\u578b (MLM)\uff0c\u65b9\u6cd5\u662f\u4f7f\u7528\u786c\u63d0\u793a\u5efa\u69cb\u63d0\u793a\u7bc4\u672c\uff1b2) \u77e5\u8b58\u548c\u7a0b\u5f0f\u78bc\u524d\u7db4\u8abf\u6574\uff0c\u900f\u904e\u8edf\u63d0\u793a\u5f15\u5165\u5916\u90e8\u77e5\u8b58\uff0c\u4e26\u4f7f\u7528\u8cc7\u6599\u6d41\u7a0b\u5716\u4f86\u63cf\u8ff0\u7a0b\u5f0f\u78bc\u7247\u6bb5\u3002\u6700\u5f8c\uff0c\u8981\u6c42\u5fc5\u8981\u6027\u9810\u6e2c\u548c\u6a19\u7c64\u5efa\u8b70\u5b50\u4efb\u52d9\u900f\u904e\u7b54\u6848\u5de5\u7a0b\u6a21\u7d44\u8f38\u51fa\u9810\u6e2c\u7d50\u679c\u3002\u6b64\u5916\uff0c\u6211\u5011\u9032\u4e00\u6b65\u5206\u6790\u4e86 KP-PCR \u7684\u6642\u9593\u8907\u96dc\u5ea6\uff0c\u5176\u5177\u6709\u8f15\u91cf\u7d1a\u7684\u524d\u7db4\uff0c\u57fa\u65bc\u5f15\u5165\u77e5\u8b58\u7684\u904b\u4f5c\u30022011-2023 \u5e74\u671f\u9593\u91dd\u5c0d PCR \u8cc7\u6599\u96c6\u7684\u5be6\u9a57\u7d50\u679c\u986f\u793a\uff0c\u6211\u5011\u7684 KP-PCR \u5728\u8981\u6c42\u5fc5\u8981\u6027\u9810\u6e2c\u65b9\u9762\u512a\u65bc\u57fa\u6e96 8.3%-28.8%\uff0c\u5728\u6a19\u7c64\u5efa\u8b70\u65b9\u9762\u512a\u65bc\u57fa\u6e96 0.1%-29.5%\u3002\u7a0b\u5f0f\u78bc\u5be6\u4f5c\u5df2\u65bc https://github.com/WUT-IDEA/KP-PCR \u767c\u5e03\u3002", "author": "Lin Li et.al.", "authors": "Lin Li, Xinchun Yu, Xinyu Chen, Peng Liang", "id": "2410.21673v1", "paper_url": "http://arxiv.org/abs/2410.21673v1", "repo": "https://github.com/wut-idea/kp-pcr"}}