{"2412.19616": {"publish_time": "2024-12-27", "title": "Gradient Weight-normalized Low-rank Projection for Efficient LLM Training", "paper_summary": "Large Language Models (LLMs) have shown remarkable performance across various\ntasks, but the escalating demands on computational resources pose significant\nchallenges, particularly in the extensive utilization of full fine-tuning for\ndownstream tasks. To address this, parameter-efficient fine-tuning (PEFT)\nmethods have been developed, but they often underperform compared to full\nfine-tuning and struggle with memory efficiency. In this work, we introduce\nGradient Weight-Normalized Low-Rank Projection (GradNormLoRP), a novel approach\nthat enhances both parameter and memory efficiency while maintaining comparable\nperformance to full fine-tuning. GradNormLoRP normalizes the weight matrix to\nimprove gradient conditioning, facilitating better convergence during\noptimization. Additionally, it applies low-rank approximations to the weight\nand gradient matrices, significantly reducing memory usage during training.\nExtensive experiments demonstrate that our 8-bit GradNormLoRP reduces optimizer\nmemory usage by up to 89.5% and enables the pre-training of large LLMs, such as\nLLaMA 7B, on consumer-level GPUs like the NVIDIA RTX 4090, without additional\ninference costs. Moreover, GradNormLoRP outperforms existing low-rank methods\nin fine-tuning tasks. For instance, when fine-tuning the RoBERTa model on all\nGLUE tasks with a rank of 8, GradNormLoRP achieves an average score of 80.65,\nsurpassing LoRA's score of 79.23. These results underscore GradNormLoRP as a\npromising alternative for efficient LLM pre-training and fine-tuning. Source\ncode and Appendix:\nhttps://github.com/Jhhuangkay/Gradient-Weight-normalized-Low-rank-Projection-for-Efficient-LLM-Training", "paper_summary_zh": "\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5728\u5404\u7a2e\u4efb\u52d9\u4e2d\u5c55\u73fe\u51fa\u5353\u8d8a\u7684\u6548\u80fd\uff0c\u4f46\u5c0d\u904b\u7b97\u8cc7\u6e90\u4e0d\u65b7\u5347\u9ad8\u7684\u9700\u6c42\u5e36\u4f86\u986f\u8457\u7684\u6311\u6230\uff0c\u5c24\u5176\u662f\u5728\u5ee3\u6cdb\u4f7f\u7528\u5b8c\u6574\u5fae\u8abf\u9032\u884c\u4e0b\u6e38\u4efb\u52d9\u6642\u3002\u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u5df2\u958b\u767c\u51fa\u53c3\u6578\u6709\u6548\u7387\u7684\u5fae\u8abf (PEFT) \u65b9\u6cd5\uff0c\u4f46\u8207\u5b8c\u6574\u5fae\u8abf\u76f8\u6bd4\uff0c\u5b83\u5011\u901a\u5e38\u8868\u73fe\u4e0d\u4f73\uff0c\u4e14\u5728\u8a18\u61b6\u9ad4\u6548\u7387\u65b9\u9762\u6709\u56f0\u96e3\u3002\u5728\u9019\u9805\u5de5\u4f5c\u4e2d\uff0c\u6211\u5011\u5f15\u5165\u4e86\u68af\u5ea6\u6b0a\u91cd\u6b63\u898f\u5316\u4f4e\u79e9\u6295\u5f71 (GradNormLoRP)\uff0c\u9019\u662f\u4e00\u7a2e\u5275\u65b0\u7684\u65b9\u6cd5\uff0c\u53ef\u5728\u7dad\u6301\u8207\u5b8c\u6574\u5fae\u8abf\u76f8\u7576\u7684\u6548\u80fd\u4e0b\uff0c\u540c\u6642\u63d0\u5347\u53c3\u6578\u548c\u8a18\u61b6\u9ad4\u6548\u7387\u3002GradNormLoRP \u5c0d\u6b0a\u91cd\u77e9\u9663\u9032\u884c\u6b63\u898f\u5316\u4ee5\u6539\u5584\u68af\u5ea6\u8abf\u6574\uff0c\u4fc3\u9032\u6700\u4f73\u5316\u671f\u9593\u66f4\u597d\u7684\u6536\u6582\u3002\u6b64\u5916\uff0c\u5b83\u5c0d\u6b0a\u91cd\u548c\u68af\u5ea6\u77e9\u9663\u5957\u7528\u4f4e\u79e9\u8fd1\u4f3c\uff0c\u5927\u5e45\u6e1b\u5c11\u8a13\u7df4\u671f\u9593\u7684\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u3002\u5ee3\u6cdb\u7684\u5be6\u9a57\u8b49\u660e\uff0c\u6211\u5011\u7684 8 \u4f4d\u5143 GradNormLoRP \u53ef\u5c07\u6700\u4f73\u5316\u5668\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\u6e1b\u5c11\u591a\u9054 89.5%\uff0c\u4e26\u53ef\u5728\u6d88\u8cbb\u7d1a GPU\uff08\u4f8b\u5982 NVIDIA RTX 4090\uff09\u4e0a\u9810\u8a13\u7df4\u5927\u578b LLM\uff08\u4f8b\u5982 LLaMA 7B\uff09\uff0c\u800c\u4e0d\u6703\u589e\u52a0\u984d\u5916\u7684\u63a8\u8ad6\u6210\u672c\u3002\u6b64\u5916\uff0cGradNormLoRP \u5728\u5fae\u8abf\u4efb\u52d9\u4e2d\u512a\u65bc\u73fe\u6709\u7684\u4f4e\u79e9\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5728\u4f7f\u7528\u79e9 8 \u5fae\u8abf RoBERTa \u6a21\u578b\u57f7\u884c\u6240\u6709 GLUE \u4efb\u52d9\u6642\uff0cGradNormLoRP \u9054\u5230 80.65 \u7684\u5e73\u5747\u5206\u6578\uff0c\u8d85\u8d8a LoRA \u7684 79.23 \u5206\u3002\u9019\u4e9b\u7d50\u679c\u5f37\u8abf GradNormLoRP \u662f\u7528\u65bc\u9ad8\u6548 LLM \u9810\u8a13\u7df4\u548c\u5fae\u8abf\u7684\u6709\u524d\u9014\u7684\u66ff\u4ee3\u65b9\u6848\u3002\u539f\u59cb\u7a0b\u5f0f\u78bc\u548c\u9644\u9304\uff1a\nhttps://github.com/Jhhuangkay/Gradient-Weight-normalized-Low-rank-Projection-for-Efficient-LLM-Training", "author": "Jia-Hong Huang et.al.", "authors": "Jia-Hong Huang, Yixian Shen, Hongyi Zhu, Stevan Rudinac, Evangelos Kanoulas", "id": "2412.19616v1", "paper_url": "http://arxiv.org/abs/2412.19616v1", "repo": "null"}}