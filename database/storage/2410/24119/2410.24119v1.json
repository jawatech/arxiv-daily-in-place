{"2410.24119": {"publish_time": "2024-10-31", "title": "Leveraging Large Language Models for Code Translation and Software Development in Scientific Computing", "paper_summary": "The emergence of foundational models and generative artificial intelligence\n(GenAI) is poised to transform productivity in scientific computing, especially\nin code development, refactoring, and translating from one programming language\nto another. However, because the output of GenAI cannot be guaranteed to be\ncorrect, manual intervention remains necessary. Some of this intervention can\nbe automated through task-specific tools, alongside additional methodologies\nfor correctness verification and effective prompt development. We explored the\napplication of GenAI in assisting with code translation, language\ninteroperability, and codebase inspection within a legacy Fortran codebase used\nto simulate particle interactions at the Large Hadron Collider (LHC). In the\nprocess, we developed a tool, CodeScribe, which combines prompt engineering\nwith user supervision to establish an efficient process for code conversion. In\nthis paper, we demonstrate how CodeScribe assists in converting Fortran code to\nC++, generating Fortran-C APIs for integrating legacy systems with modern C++\nlibraries, and providing developer support for code organization and algorithm\nimplementation. We also address the challenges of AI-driven code translation\nand highlight its benefits for enhancing productivity in scientific computing\nworkflows.", "paper_summary_zh": "\u57fa\u790e\u6a21\u578b\u548c\u751f\u6210\u5f0f\u4eba\u5de5\u667a\u6167 (GenAI) \u7684\u51fa\u73fe\uff0c\u5c07\u8f49\u8b8a\u79d1\u5b78\u904b\u7b97\u4e2d\u7684\u751f\u7522\u529b\uff0c\u5c24\u5176\u662f\u5728\u7a0b\u5f0f\u78bc\u958b\u767c\u3001\u91cd\u69cb\u548c\u5f9e\u4e00\u7a2e\u7a0b\u5f0f\u8a9e\u8a00\u8f49\u63db\u5230\u53e6\u4e00\u7a2e\u7a0b\u5f0f\u8a9e\u8a00\u3002\u7136\u800c\uff0c\u7531\u65bc\u7121\u6cd5\u4fdd\u8b49 GenAI \u7684\u8f38\u51fa\u6b63\u78ba\uff0c\u56e0\u6b64\u4ecd\u7136\u9700\u8981\u624b\u52d5\u4ecb\u5165\u3002\u5176\u4e2d\u4e00\u4e9b\u4ecb\u5165\u53ef\u900f\u904e\u7279\u5b9a\u65bc\u4efb\u52d9\u7684\u5de5\u5177\u81ea\u52d5\u5316\uff0c\u4e26\u642d\u914d\u984d\u5916\u7684\u6b63\u78ba\u6027\u9a57\u8b49\u548c\u6709\u6548\u63d0\u793a\u958b\u767c\u65b9\u6cd5\u3002\u6211\u5011\u63a2\u8a0e GenAI \u5728\u5354\u52a9\u7a0b\u5f0f\u78bc\u8f49\u63db\u3001\u8a9e\u8a00\u4e92\u64cd\u4f5c\u6027\uff0c\u4ee5\u53ca\u5728\u5927\u578b\u5f37\u5b50\u5c0d\u649e\u6a5f (LHC) \u4e2d\u6a21\u64ec\u7c92\u5b50\u4ea4\u4e92\u6240\u4f7f\u7528\u7684\u50b3\u7d71 Fortran \u7a0b\u5f0f\u78bc\u5eab\u4e2d\u7684\u7a0b\u5f0f\u78bc\u5eab\u6aa2\u67e5\u65b9\u9762\u7684\u61c9\u7528\u3002\u5728\u6b64\u904e\u7a0b\u4e2d\uff0c\u6211\u5011\u958b\u767c\u4e86\u4e00\u500b\u5de5\u5177 CodeScribe\uff0c\u5b83\u7d50\u5408\u63d0\u793a\u5de5\u7a0b\u548c\u4f7f\u7528\u8005\u76e3\u7763\uff0c\u4ee5\u5efa\u7acb\u4e00\u500b\u7528\u65bc\u7a0b\u5f0f\u78bc\u8f49\u63db\u7684\u6709\u6548\u7387\u6d41\u7a0b\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5011\u5c55\u793a CodeScribe \u5982\u4f55\u5354\u52a9\u5c07 Fortran \u7a0b\u5f0f\u78bc\u8f49\u63db\u70ba C++\uff0c\u7522\u751f Fortran-C API \u4ee5\u5c07\u50b3\u7d71\u7cfb\u7d71\u8207\u73fe\u4ee3 C++ \u51fd\u5f0f\u5eab\u6574\u5408\uff0c\u4e26\u63d0\u4f9b\u958b\u767c\u4eba\u54e1\u652f\u63f4\uff0c\u4ee5\u9032\u884c\u7a0b\u5f0f\u78bc\u7d44\u7e54\u548c\u6f14\u7b97\u6cd5\u5be6\u4f5c\u3002\u6211\u5011\u4e5f\u63a2\u8a0e AI \u9a45\u52d5\u7a0b\u5f0f\u78bc\u8f49\u63db\u7684\u6311\u6230\uff0c\u4e26\u5f37\u8abf\u5176\u5728\u63d0\u5347\u79d1\u5b78\u904b\u7b97\u5de5\u4f5c\u6d41\u7a0b\u751f\u7522\u529b\u65b9\u9762\u7684\u512a\u9ede\u3002", "author": "Akash Dhruv et.al.", "authors": "Akash Dhruv, Anshu Dubey", "id": "2410.24119v1", "paper_url": "http://arxiv.org/abs/2410.24119v1", "repo": "https://github.com/neucol/llm-conversion-performance"}}