{"2501.12862": {"publish_time": "2025-01-22", "title": "Mutation-Guided LLM-based Test Generation at Meta", "paper_summary": "This paper describes Meta's ACH system for mutation-guided LLM-based test\ngeneration. ACH generates relatively few mutants (aka simulated faults),\ncompared to traditional mutation testing. Instead, it focuses on generating\ncurrently undetected faults that are specific to an issue of concern. From\nthese currently uncaught faults, ACH generates tests that can catch them,\nthereby `killing' the mutants and consequently hardening the platform against\nregressions. We use privacy concerns to illustrate our approach, but ACH can\nharden code against {\\em any} type of regression. In total, ACH was applied to\n10,795 Android Kotlin classes in 7 software platforms deployed by Meta, from\nwhich it generated 9,095 mutants and 571 privacy-hardening test cases. ACH also\ndeploys an LLM-based equivalent mutant detection agent that achieves a\nprecision of 0.79 and a recall of 0.47 (rising to 0.95 and 0.96 with simple\npre-processing). ACH was used by Messenger and WhatsApp test-a-thons where\nengineers accepted 73% of its tests, judging 36% to privacy relevant. We\nconclude that ACH hardens code against specific concerns and that, even when\nits tests do not directly tackle the specific concern, engineers find them\nuseful for their other benefits.", "paper_summary_zh": "\u672c\u6587\u63cf\u8ff0\u4e86 Meta \u7684 ACH \u7cfb\u7edf\uff0c\u7528\u4e8e\u57fa\u4e8e LLM \u7684\u53d8\u5f02\u5f15\u5bfc\u6d4b\u8bd5\u751f\u6210\u3002\u4e0e\u4f20\u7edf\u7684\u53d8\u5f02\u6d4b\u8bd5\u76f8\u6bd4\uff0cACH \u751f\u6210\u7684\u53d8\u5f02\u4f53\uff08\u53c8\u79f0\u6a21\u62df\u6545\u969c\uff09\u76f8\u5bf9\u8f83\u5c11\u3002\u76f8\u53cd\uff0c\u5b83\u4e13\u6ce8\u4e8e\u751f\u6210\u7279\u5b9a\u4e8e\u5173\u6ce8\u95ee\u9898\u7684\u5f53\u524d\u672a\u68c0\u6d4b\u5230\u7684\u6545\u969c\u3002\u4ece\u8fd9\u4e9b\u5f53\u524d\u672a\u6355\u83b7\u7684\u6545\u969c\u4e2d\uff0cACH \u751f\u6210\u4e86\u53ef\u4ee5\u6355\u83b7\u5b83\u4eec\u7684\u6d4b\u8bd5\uff0c\u4ece\u800c\u201c\u6740\u6b7b\u201d\u53d8\u5f02\u4f53\uff0c\u8fdb\u800c\u589e\u5f3a\u5e73\u53f0\u5bf9\u56de\u5f52\u7684\u62b5\u6297\u529b\u3002\u6211\u4eec\u4f7f\u7528\u9690\u79c1\u95ee\u9898\u6765\u8bf4\u660e\u6211\u4eec\u7684\u65b9\u6cd5\uff0c\u4f46 ACH \u53ef\u4ee5\u9488\u5bf9\u4efb\u4f55\u7c7b\u578b\u7684\u56de\u5f52\u5f3a\u5316\u4ee3\u7801\u3002\u603b\u800c\u8a00\u4e4b\uff0cACH \u5df2\u5e94\u7528\u4e8e Meta \u90e8\u7f72\u7684 7 \u4e2a\u8f6f\u4ef6\u5e73\u53f0\u4e2d\u7684 10,795 \u4e2a Android Kotlin \u7c7b\uff0c\u4ece\u4e2d\u751f\u6210\u4e86 9,095 \u4e2a\u53d8\u5f02\u4f53\u548c 571 \u4e2a\u9690\u79c1\u5f3a\u5316\u6d4b\u8bd5\u7528\u4f8b\u3002ACH \u8fd8\u90e8\u7f72\u4e86\u57fa\u4e8e LLM \u7684\u7b49\u6548\u53d8\u5f02\u4f53\u68c0\u6d4b\u4ee3\u7406\uff0c\u5176\u7cbe\u5ea6\u8fbe\u5230 0.79\uff0c\u53ec\u56de\u7387\u8fbe\u5230 0.47\uff08\u4f7f\u7528\u7b80\u5355\u7684\u9884\u5904\u7406\u540e\u5206\u522b\u5347\u81f3 0.95 \u548c 0.96\uff09\u3002ACH \u88ab Messenger \u548c WhatsApp \u7684\u6d4b\u8bd5\u9a6c\u62c9\u677e\u4f7f\u7528\uff0c\u5de5\u7a0b\u5e08\u63a5\u53d7\u4e86\u5176 73% \u7684\u6d4b\u8bd5\uff0c\u5176\u4e2d 36% \u88ab\u8ba4\u4e3a\u4e0e\u9690\u79c1\u76f8\u5173\u3002\u6211\u4eec\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0cACH \u9488\u5bf9\u7279\u5b9a\u95ee\u9898\u5f3a\u5316\u4e86\u4ee3\u7801\uff0c\u5373\u4f7f\u5176\u6d4b\u8bd5\u6ca1\u6709\u76f4\u63a5\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\uff0c\u5de5\u7a0b\u5e08\u4e5f\u4f1a\u53d1\u73b0\u5b83\u4eec\u5bf9\u5176\u4ed6\u597d\u5904\u5f88\u6709\u7528\u3002", "author": "Christopher Foster et.al.", "authors": "Christopher Foster, Abhishek Gulati, Mark Harman, Inna Harper, Ke Mao, Jillian Ritchey, Herv\u00e9 Robert, Shubho Sengupta", "id": "2501.12862v1", "paper_url": "http://arxiv.org/abs/2501.12862v1", "repo": "null"}}