{"2502.09230": {"publish_time": "2025-02-13", "title": "Relating Answer Set Programming and Many-sorted Logics for Formal Verification", "paper_summary": "Answer Set Programming (ASP) is an important logic programming paradigm\nwithin the field of Knowledge Representation and Reasoning. As a concise,\nhuman-readable, declarative language, ASP is an excellent tool for developing\ntrustworthy (especially, artificially intelligent) software systems. However,\nformally verifying ASP programs offers some unique challenges, such as\n  1. a lack of modularity (the meanings of rules are difficult to define in\nisolation from the enclosing program),\n  2. the ground-and-solve semantics (the meanings of rules are dependent on the\ninput data with which the program is grounded), and\n  3. limitations of existing tools.\n  My research agenda has been focused on addressing these three issues with the\nintention of making ASP verification an accessible, routine task that is\nregularly performed alongside program development. In this vein, I have\ninvestigated alternative semantics for ASP based on translations into the logic\nof here-and-there and many-sorted first-order logic. These semantics promote a\nmodular understanding of logic programs, bypass grounding, and enable us to use\nautomated theorem provers to automatically verify properties of programs.", "paper_summary_zh": "<paragraph>\u7b54\u6848\u96c6\u7a0b\u5f0f\u8a2d\u8a08 (ASP) \u662f\u77e5\u8b58\u8868\u5fb5\u8207\u63a8\u7406\u9818\u57df\u4e2d\u4e00\u500b\u91cd\u8981\u7684\u908f\u8f2f\u7a0b\u5f0f\u8a2d\u8a08\u7bc4\u5f0f\u3002ASP \u4f5c\u70ba\u4e00\u7a2e\u7c21\u6f54\u3001\u4eba\u985e\u53ef\u8b80\u3001\u5ba3\u544a\u5f0f\u7684\u8a9e\u8a00\uff0c\u662f\u958b\u767c\u503c\u5f97\u4fe1\u8cf4\u7684 (\u7279\u5225\u662f\u4eba\u5de5\u667a\u6167) \u8edf\u9ad4\u7cfb\u7d71\u7684\u7d55\u4f73\u5de5\u5177\u3002\u7136\u800c\uff0c\u6b63\u5f0f\u9a57\u8b49 ASP \u7a0b\u5f0f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7368\u7279\u7684\u6311\u6230\uff0c\u4f8b\u5982\n  1. \u7f3a\u4e4f\u6a21\u7d44\u5316 (\u898f\u5247\u7684\u542b\u7fa9\u96e3\u4ee5\u8207\u5c01\u9589\u7a0b\u5f0f\u9694\u96e2\u5b9a\u7fa9)\uff0c\n  2. \u57fa\u790e\u8207\u6c42\u89e3\u8a9e\u610f (\u898f\u5247\u7684\u542b\u7fa9\u53d6\u6c7a\u65bc\u7a0b\u5f0f\u57fa\u790e\u7684\u8f38\u5165\u8cc7\u6599)\uff0c\u4ee5\u53ca\n  3. \u73fe\u6709\u5de5\u5177\u7684\u9650\u5236\u3002\n  \u6211\u7684\u7814\u7a76\u8b70\u7a0b\u4e00\u76f4\u5c08\u6ce8\u65bc\u89e3\u6c7a\u9019\u4e09\u500b\u554f\u984c\uff0c\u76ee\u7684\u662f\u8b93 ASP \u9a57\u8b49\u6210\u70ba\u4e00\u500b\u53ef\u5b58\u53d6\u7684\u3001\u4f8b\u884c\u4efb\u52d9\uff0c\u4e26\u5728\u7a0b\u5f0f\u958b\u767c\u904e\u7a0b\u4e2d\u5b9a\u671f\u57f7\u884c\u3002\u5728\u9019\u500b\u8108\u7d61\u4e0b\uff0c\u6211\u7814\u7a76\u4e86\u57fa\u65bc\u7ffb\u8b6f\u6210\u6b64\u8655\u548c\u5f7c\u8655\u908f\u8f2f\u4ee5\u53ca\u591a\u7a2e\u6392\u5e8f\u4e00\u968e\u908f\u8f2f\u7684 ASP \u66ff\u4ee3\u8a9e\u610f\u3002\u9019\u4e9b\u8a9e\u610f\u4fc3\u9032\u4e86\u908f\u8f2f\u7a0b\u5f0f\u7684\u6a21\u7d44\u5316\u7406\u89e3\uff0c\u7e5e\u904e\u57fa\u790e\uff0c\u4e26\u4f7f\u6211\u5011\u80fd\u5920\u4f7f\u7528\u81ea\u52d5\u5316\u5b9a\u7406\u8b49\u660e\u5668\u81ea\u52d5\u9a57\u8b49\u7a0b\u5f0f\u7684\u5c6c\u6027\u3002</paragraph>", "author": "Zachary Hansen et.al.", "authors": "Zachary Hansen", "id": "2502.09230v1", "paper_url": "http://arxiv.org/abs/2502.09230v1", "repo": "null"}}