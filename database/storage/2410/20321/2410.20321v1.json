{"2410.20321": {"publish_time": "2024-10-27", "title": "Effective Instruction Parsing Plugin for Complex Logical Query Answering on Knowledge Graphs", "paper_summary": "Knowledge Graph Query Embedding (KGQE) aims to embed First-Order Logic (FOL)\nqueries in a low-dimensional KG space for complex reasoning over incomplete\nKGs. To enhance the generalization of KGQE models, recent studies integrate\nvarious external information (such as entity types and relation context) to\nbetter capture the logical semantics of FOL queries. The whole process is\ncommonly referred to as Query Pattern Learning (QPL). However, current QPL\nmethods typically suffer from the pattern-entity alignment bias problem,\nleading to the learned defective query patterns limiting KGQE models'\nperformance. To address this problem, we propose an effective Query Instruction\nParsing Plugin (QIPP) that leverages the context awareness of Pre-trained\nLanguage Models (PLMs) to capture latent query patterns from code-like query\ninstructions. Unlike the external information introduced by previous QPL\nmethods, we first propose code-like instructions to express FOL queries in an\nalternative format. This format utilizes textual variables and nested tuples to\nconvey the logical semantics within FOL queries, serving as raw materials for a\nPLM-based instruction encoder to obtain complete query patterns. Building on\nthis, we design a query-guided instruction decoder to adapt query patterns to\nKGQE models. To further enhance QIPP's effectiveness across various KGQE\nmodels, we propose a query pattern injection mechanism based on compressed\noptimization boundaries and an adaptive normalization component, allowing KGQE\nmodels to utilize query patterns more efficiently. Extensive experiments\ndemonstrate that our plug-and-play method improves the performance of eight\nbasic KGQE models and outperforms two state-of-the-art QPL methods.", "paper_summary_zh": "\u77e5\u8b58\u5716\u8b5c\u67e5\u8a62\u5d4c\u5165\uff08KGQE\uff09\u65e8\u5728\u5c07\u4e00\u968e\u908f\u8f2f\uff08FOL\uff09\u67e5\u8a62\u5d4c\u5165\u5230\u4f4e\u7dad KG \u7a7a\u9593\u4e2d\uff0c\u4ee5\u4fbf\u5c0d\u4e0d\u5b8c\u6574\u7684 KG \u9032\u884c\u8907\u96dc\u63a8\u7406\u3002\u70ba\u4e86\u589e\u5f37 KGQE \u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u6700\u8fd1\u7684\u7814\u7a76\u6574\u5408\u4e86\u5404\u7a2e\u5916\u90e8\u8cc7\u8a0a\uff08\u4f8b\u5982\u5be6\u9ad4\u985e\u578b\u548c\u95dc\u4fc2\u4e0a\u4e0b\u6587\uff09\uff0c\u4ee5\u66f4\u597d\u5730\u6355\u6349 FOL \u67e5\u8a62\u7684\u908f\u8f2f\u8a9e\u7fa9\u3002\u6574\u500b\u904e\u7a0b\u901a\u5e38\u7a31\u70ba\u67e5\u8a62\u6a21\u5f0f\u5b78\u7fd2\uff08QPL\uff09\u3002\u7136\u800c\uff0c\u7576\u524d\u7684 QPL \u65b9\u6cd5\u901a\u5e38\u6703\u53d7\u5230\u6a21\u5f0f\u5be6\u9ad4\u5c0d\u9f4a\u504f\u5dee\u554f\u984c\u7684\u5f71\u97ff\uff0c\u5c0e\u81f4\u5b78\u7fd2\u5230\u7684\u6709\u7f3a\u9677\u67e5\u8a62\u6a21\u5f0f\u9650\u5236\u4e86 KGQE \u6a21\u578b\u7684\u6548\u80fd\u3002\u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u6211\u5011\u63d0\u51fa\u4e86\u4e00\u500b\u6709\u6548\u7684\u67e5\u8a62\u6307\u4ee4\u89e3\u6790\u5916\u639b\u7a0b\u5f0f\uff08QIPP\uff09\uff0c\u5b83\u5229\u7528\u9810\u8a13\u7df4\u8a9e\u8a00\u6a21\u578b\uff08PLM\uff09\u7684\u4e0a\u4e0b\u6587\u611f\u77e5\u4f86\u5f9e\u985e\u4ee3\u78bc\u7684\u67e5\u8a62\u6307\u4ee4\u4e2d\u64f7\u53d6\u6f5b\u5728\u67e5\u8a62\u6a21\u5f0f\u3002\u8207\u5148\u524d QPL \u65b9\u6cd5\u5f15\u5165\u7684\u5916\u90e8\u8cc7\u8a0a\u4e0d\u540c\uff0c\u6211\u5011\u9996\u5148\u63d0\u51fa\u985e\u4ee3\u78bc\u7684\u6307\u4ee4\u4ee5\u53e6\u985e\u683c\u5f0f\u8868\u9054 FOL \u67e5\u8a62\u3002\u6b64\u683c\u5f0f\u5229\u7528\u6587\u5b57\u8b8a\u6578\u548c\u5de2\u72c0\u5143\u7d44\u4f86\u50b3\u9054 FOL \u67e5\u8a62\u4e2d\u7684\u908f\u8f2f\u8a9e\u7fa9\uff0c\u4f5c\u70ba\u57fa\u65bc PLM \u7684\u6307\u4ee4\u7de8\u78bc\u5668\u7684\u539f\u6599\uff0c\u4ee5\u53d6\u5f97\u5b8c\u6574\u7684\u67e5\u8a62\u6a21\u5f0f\u3002\u5728\u6b64\u57fa\u790e\u4e0a\uff0c\u6211\u5011\u8a2d\u8a08\u4e86\u4e00\u500b\u67e5\u8a62\u5f15\u5c0e\u7684\u6307\u4ee4\u89e3\u78bc\u5668\uff0c\u4ee5\u5c07\u67e5\u8a62\u6a21\u5f0f\u8abf\u6574\u5230 KGQE \u6a21\u578b\u3002\u70ba\u4e86\u9032\u4e00\u6b65\u589e\u5f37 QIPP \u5728\u5404\u7a2e KGQE \u6a21\u578b\u4e2d\u7684\u6709\u6548\u6027\uff0c\u6211\u5011\u63d0\u51fa\u4e86\u4e00\u500b\u57fa\u65bc\u58d3\u7e2e\u6700\u4f73\u5316\u908a\u754c\u548c\u81ea\u9069\u61c9\u6b63\u898f\u5316\u5143\u4ef6\u7684\u67e5\u8a62\u6a21\u5f0f\u6ce8\u5165\u6a5f\u5236\uff0c\u5141\u8a31 KGQE \u6a21\u578b\u66f4\u6709\u6548\u5730\u5229\u7528\u67e5\u8a62\u6a21\u5f0f\u3002\u5ee3\u6cdb\u7684\u5be6\u9a57\u8868\u660e\uff0c\u6211\u5011\u7684\u5373\u63d2\u5373\u7528\u65b9\u6cd5\u6539\u5584\u4e86\u516b\u500b\u57fa\u672c KGQE \u6a21\u578b\u7684\u6548\u80fd\uff0c\u4e26\u512a\u65bc\u5169\u7a2e\u6700\u5148\u9032\u7684 QPL \u65b9\u6cd5\u3002", "author": "Xingrui Zhuo et.al.", "authors": "Xingrui Zhuo, Jiapu Wang, Gongqing Wu, Shirui Pan, Xindong Wu", "id": "2410.20321v1", "paper_url": "http://arxiv.org/abs/2410.20321v1", "repo": "null"}}