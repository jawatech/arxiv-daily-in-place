{"2502.07815": {"publish_time": "2025-02-09", "title": "Decoding Complexity: Intelligent Pattern Exploration with CHPDA (Context Aware Hybrid Pattern Detection Algorithm)", "paper_summary": "Detecting sensitive data such as Personally Identifiable Information (PII)\nand Protected Health Information (PHI) is critical for data security platforms.\nThis study evaluates regex-based pattern matching algorithms and exact-match\nsearch techniques to optimize detection speed, accuracy, and scalability. Our\nbenchmarking results indicate that Google RE2 provides the best balance of\nspeed (10-15 ms/MB), memory efficiency (8-16 MB), and accuracy (99.5%) among\nregex engines, outperforming PCRE while maintaining broader hardware\ncompatibility than Hyperscan. For exact matching, Aho-Corasick demonstrated\nsuperior performance (8 ms/MB) and scalability for large datasets. Performance\nanalysis revealed that regex processing time scales linearly with dataset size\nand pattern complexity. A hybrid AI + Regex approach achieved the highest F1\nscore (91. 6%) by improving recall and minimizing false positives. Device\nbenchmarking confirmed that our solution maintains efficient CPU and memory\nusage on both high-performance and mid-range systems. Despite its\neffectiveness, challenges remain, such as limited multilingual support and the\nneed for regular pattern updates. Future work should focus on expanding\nlanguage coverage, integrating data security and privacy management (DSPM) with\ndata loss prevention (DLP) tools, and enhancing regulatory compliance for\nbroader global adoption.", "paper_summary_zh": "\u5075\u6e2c\u500b\u4eba\u8eab\u5206\u8cc7\u8a0a (PII) \u548c\u53d7\u4fdd\u8b77\u5065\u5eb7\u8cc7\u8a0a (PHI) \u7b49\u654f\u611f\u8cc7\u6599\uff0c\u5c0d\u65bc\u8cc7\u6599\u5b89\u5168\u5e73\u53f0\u81f3\u95dc\u91cd\u8981\u3002\u672c\u7814\u7a76\u8a55\u4f30\u57fa\u65bc regex \u7684\u6a21\u5f0f\u914d\u5c0d\u6f14\u7b97\u6cd5\u548c\u7cbe\u78ba\u914d\u5c0d\u641c\u5c0b\u6280\u8853\uff0c\u4ee5\u6700\u4f73\u5316\u5075\u6e2c\u901f\u5ea6\u3001\u6e96\u78ba\u5ea6\u548c\u53ef\u64f4\u5145\u6027\u3002\u6211\u5011\u7684\u57fa\u6e96\u6e2c\u8a66\u7d50\u679c\u986f\u793a\uff0c\u5728 regex \u5f15\u64ce\u4e2d\uff0cGoogle RE2 \u5728\u901f\u5ea6 (10-15 ms/MB)\u3001\u8a18\u61b6\u9ad4\u6548\u7387 (8-16 MB) \u548c\u6e96\u78ba\u5ea6 (99.5%) \u65b9\u9762\u53d6\u5f97\u6700\u4f73\u5e73\u8861\uff0c\u512a\u65bc PCRE\uff0c\u540c\u6642\u6bd4 Hyperscan \u64c1\u6709\u66f4\u5ee3\u6cdb\u7684\u786c\u9ad4\u76f8\u5bb9\u6027\u3002\u5c0d\u65bc\u7cbe\u78ba\u914d\u5c0d\uff0cAho-Corasick \u5c55\u73fe\u51fa\u512a\u7570\u7684\u6548\u80fd (8 ms/MB) \u548c\u5927\u8cc7\u6599\u96c6\u7684\u53ef\u64f4\u5145\u6027\u3002\u6548\u80fd\u5206\u6790\u986f\u793a\uff0cregex \u8655\u7406\u6642\u9593\u6703\u96a8\u8457\u8cc7\u6599\u96c6\u5927\u5c0f\u548c\u6a21\u5f0f\u8907\u96dc\u5ea6\u7dda\u6027\u64f4\u5145\u3002\u6df7\u5408 AI + Regex \u65b9\u6cd5\u900f\u904e\u63d0\u5347\u53ec\u56de\u7387\u548c\u5c07\u5047\u967d\u6027\u964d\u81f3\u6700\u4f4e\uff0c\u9054\u5230\u4e86\u6700\u9ad8\u7684 F1 \u5206\u6578 (91. 6%)\u3002\u88dd\u7f6e\u57fa\u6e96\u6e2c\u8a66\u78ba\u8a8d\u6211\u5011\u7684\u89e3\u6c7a\u65b9\u6848\u5728\u9ad8\u6027\u80fd\u548c\u4e2d\u968e\u7cfb\u7d71\u4e0a\u90fd\u80fd\u7dad\u6301\u9ad8\u6548\u7684 CPU \u548c\u8a18\u61b6\u9ad4\u4f7f\u7528\u7387\u3002\u5118\u7ba1\u6709\u6548\uff0c\u4f46\u4ecd\u6709\u6311\u6230\u5b58\u5728\uff0c\u4f8b\u5982\u591a\u8a9e\u8a00\u652f\u63f4\u6709\u9650\uff0c\u4ee5\u53ca\u9700\u8981\u5b9a\u671f\u66f4\u65b0\u6a21\u5f0f\u3002\u672a\u4f86\u7684\u7814\u7a76\u61c9\u8457\u91cd\u65bc\u64f4\u5c55\u8a9e\u8a00\u6db5\u84cb\u7bc4\u570d\uff0c\u5c07\u8cc7\u6599\u5b89\u5168\u548c\u96b1\u79c1\u7ba1\u7406 (DSPM) \u8207\u8cc7\u6599\u907a\u5931\u9632\u8b77 (DLP) \u5de5\u5177\u6574\u5408\uff0c\u4ee5\u53ca\u52a0\u5f37\u6cd5\u898f\u9075\u5faa\u4ee5\u5229\u66f4\u5ee3\u6cdb\u7684\u5168\u7403\u63a1\u7528\u3002", "author": "Lokesh Koli et.al.", "authors": "Lokesh Koli, Shubham Kalra, Karanpreet Singh", "id": "2502.07815v1", "paper_url": "http://arxiv.org/abs/2502.07815v1", "repo": "null"}}