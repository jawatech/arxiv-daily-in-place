{"2406.15676": {"publish_time": "2024-06-21", "title": "Inferring Pluggable Types with Machine Learning", "paper_summary": "Pluggable type systems allow programmers to extend the type system of a\nprogramming language to enforce semantic properties defined by the programmer.\nPluggable type systems are difficult to deploy in legacy codebases because they\nrequire programmers to write type annotations manually. This paper investigates\nhow to use machine learning to infer type qualifiers automatically. We propose\na novel representation, NaP-AST, that encodes minimal dataflow hints for the\neffective inference of type qualifiers. We evaluate several model architectures\nfor inferring type qualifiers, including Graph Transformer Network, Graph\nConvolutional Network and Large Language Model. We further validated these\nmodels by applying them to 12 open-source programs from a prior evaluation of\nthe NullAway pluggable typechecker, lowering warnings in all but one\nunannotated project. We discovered that GTN shows the best performance, with a\nrecall of .89 and precision of 0.6. Furthermore, we conduct a study to estimate\nthe number of Java classes needed for good performance of the trained model.\nFor our feasibility study, performance improved around 16k classes, and\ndeteriorated due to overfitting around 22k classes.", "paper_summary_zh": "\u53ef\u63d2\u62d4\u7c7b\u578b\u7cfb\u7edf\u5141\u8bb8\u7a0b\u5e8f\u5458\u6269\u5c55\u7f16\u7a0b\u8bed\u8a00\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u4ee5\u6267\u884c\u7a0b\u5e8f\u5458\u5b9a\u4e49\u7684\u8bed\u4e49\u5c5e\u6027\u3002\u53ef\u63d2\u62d4\u7c7b\u578b\u7cfb\u7edf\u96be\u4ee5\u90e8\u7f72\u5728\u9057\u7559\u4ee3\u7801\u5e93\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4eec\u8981\u6c42\u7a0b\u5e8f\u5458\u624b\u52a8\u7f16\u5199\u7c7b\u578b\u6ce8\u91ca\u3002\u672c\u6587\u7814\u7a76\u5982\u4f55\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u9650\u5b9a\u7b26\u3002\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u8868\u793a\u5f62\u5f0f NaP-AST\uff0c\u5b83\u5bf9\u7c7b\u578b\u9650\u5b9a\u7b26\u7684\u6709\u6548\u63a8\u65ad\u7f16\u7801\u4e86\u6700\u5c0f\u7684\u6570\u636e\u6d41\u63d0\u793a\u3002\u6211\u4eec\u8bc4\u4f30\u4e86\u7528\u4e8e\u63a8\u65ad\u7c7b\u578b\u9650\u5b9a\u7b26\u7684\u51e0\u79cd\u6a21\u578b\u67b6\u6784\uff0c\u5305\u62ec\u56fe\u8f6c\u6362\u5668\u7f51\u7edc\u3001\u56fe\u5377\u79ef\u7f51\u7edc\u548c\u5927\u8bed\u8a00\u6a21\u578b\u3002\u6211\u4eec\u901a\u8fc7\u5c06\u8fd9\u4e9b\u6a21\u578b\u5e94\u7528\u4e8e NullAway \u53ef\u63d2\u62d4\u7c7b\u578b\u68c0\u67e5\u5668\u7684\u5148\u524d\u8bc4\u4f30\u4e2d\u7684 12 \u4e2a\u5f00\u6e90\u7a0b\u5e8f\uff0c\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u4e86\u8fd9\u4e9b\u6a21\u578b\uff0c\u9664\u4e86\u4e00\u4e2a\u672a\u6ce8\u91ca\u7684\u9879\u76ee\u5916\uff0c\u964d\u4f4e\u4e86\u6240\u6709\u9879\u76ee\u7684\u8b66\u544a\u3002\u6211\u4eec\u53d1\u73b0 GTN \u8868\u73b0\u6700\u4f73\uff0c\u53ec\u56de\u7387\u4e3a 0.89\uff0c\u7cbe\u786e\u7387\u4e3a 0.6\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u4e00\u9879\u7814\u7a76\uff0c\u4ee5\u4f30\u8ba1\u8bad\u7ec3\u6a21\u578b\u826f\u597d\u6027\u80fd\u6240\u9700\u7684 Java \u7c7b\u6570\u91cf\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u53ef\u884c\u6027\u7814\u7a76\uff0c\u6027\u80fd\u63d0\u9ad8\u4e86\u7ea6 16k \u4e2a\u7c7b\uff0c\u5e76\u4e14\u7531\u4e8e\u5728 22k \u4e2a\u7c7b\u5de6\u53f3\u8fc7\u5ea6\u62df\u5408\u800c\u6076\u5316\u3002", "author": "Kazi Amanul Islam Siddiqui et.al.", "authors": "Kazi Amanul Islam Siddiqui, Martin Kellogg", "id": "2406.15676v1", "paper_url": "http://arxiv.org/abs/2406.15676v1", "repo": "null"}}