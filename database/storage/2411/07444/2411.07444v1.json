{"2411.07444": {"publish_time": "2024-11-12", "title": "Input-Based Ensemble-Learning Method for Dynamic Memory Configuration of Serverless Computing Functions", "paper_summary": "In today's Function-as-a-Service offerings, a programmer is usually\nresponsible for configuring function memory for its successful execution, which\nallocates proportional function resources such as CPU and network. However,\nright-sizing the function memory force developers to speculate performance and\nmake ad-hoc configuration decisions. Recent research has highlighted that a\nfunction's input characteristics, such as input size, type and number of\ninputs, significantly impact its resource demand, run-time performance and\ncosts with fluctuating workloads. This correlation further makes memory\nconfiguration a non-trivial task. On that account, an input-aware function\nmemory allocator not only improves developer productivity by completely hiding\nresource-related decisions but also drives an opportunity to reduce resource\nwastage and offer a finer-grained cost-optimised pricing scheme. Therefore, we\npresent MemFigLess, a serverless solution that estimates the memory requirement\nof a serverless function with input-awareness. The framework executes function\nprofiling in an offline stage and trains a multi-output Random Forest\nRegression model on the collected metrics to invoke input-aware optimal\nconfigurations. We evaluate our work with the state-of-the-art approaches on\nAWS Lambda service to find that MemFigLess is able to capture the input-aware\nresource relationships and allocate upto 82% less resources and save up to 87%\nrun-time costs.", "paper_summary_zh": "\u5728\u7576\u4eca\u7684\u51fd\u5f0f\u5373\u670d\u52d9\u7522\u54c1\u4e2d\uff0c\u7a0b\u5f0f\u8a2d\u8a08\u4eba\u54e1\u901a\u5e38\u8ca0\u8cac\u8a2d\u5b9a\u51fd\u5f0f\u8a18\u61b6\u9ad4\u4ee5\u5229\u6210\u529f\u57f7\u884c\uff0c\u9019\u6703\u914d\u7f6e\u6210\u6bd4\u4f8b\u7684\u51fd\u5f0f\u8cc7\u6e90\uff0c\u4f8b\u5982 CPU \u548c\u7db2\u8def\u3002\u4e0d\u904e\uff0c\u6b63\u78ba\u8abf\u6574\u51fd\u5f0f\u8a18\u61b6\u9ad4\u6703\u5f37\u8feb\u958b\u767c\u4eba\u54e1\u63a8\u6e2c\u6548\u80fd\u4e26\u505a\u51fa\u81e8\u6642\u8a2d\u5b9a\u6c7a\u7b56\u3002\u6700\u8fd1\u7684\u7814\u7a76\u5f37\u8abf\u51fd\u5f0f\u7684\u8f38\u5165\u7279\u5fb5\uff08\u4f8b\u5982\u8f38\u5165\u5927\u5c0f\u3001\u985e\u578b\u548c\u8f38\u5165\u6578\u91cf\uff09\u6703\u986f\u8457\u5f71\u97ff\u5176\u8cc7\u6e90\u9700\u6c42\u3001\u57f7\u884c\u6642\u9593\u6548\u80fd\u548c\u5de5\u4f5c\u8ca0\u8f09\u6ce2\u52d5\u7684\u6210\u672c\u3002\u9019\u7a2e\u95dc\u806f\u6027\u9032\u4e00\u6b65\u4f7f\u8a18\u61b6\u9ad4\u8a2d\u5b9a\u6210\u70ba\u4e00\u9805\u975e\u5e73\u51e1\u7684\u4efb\u52d9\u3002\u6709\u9451\u65bc\u6b64\uff0c\u4e00\u500b\u5177\u8f38\u5165\u611f\u77e5\u80fd\u529b\u7684\u51fd\u5f0f\u8a18\u61b6\u9ad4\u914d\u7f6e\u5668\u4e0d\u50c5\u80fd\u900f\u904e\u5b8c\u5168\u96b1\u85cf\u8207\u8cc7\u6e90\u76f8\u95dc\u7684\u6c7a\u7b56\u4f86\u63d0\u5347\u958b\u767c\u4eba\u54e1\u751f\u7522\u529b\uff0c\u9084\u80fd\u9a45\u52d5\u4e00\u500b\u6a5f\u6703\u4f86\u6e1b\u5c11\u8cc7\u6e90\u6d6a\u8cbb\u4e26\u63d0\u4f9b\u66f4\u7d30\u7dfb\u7684\u6210\u672c\u6700\u4f73\u5316\u5b9a\u50f9\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u6211\u5011\u63d0\u51fa MemFigLess\uff0c\u9019\u662f\u4e00\u500b\u7121\u4f3a\u670d\u5668\u89e3\u6c7a\u65b9\u6848\uff0c\u53ef\u4f30\u8a08\u5177\u8f38\u5165\u611f\u77e5\u80fd\u529b\u7684\u7121\u4f3a\u670d\u5668\u51fd\u5f0f\u7684\u8a18\u61b6\u9ad4\u9700\u6c42\u3002\u6b64\u67b6\u69cb\u5728\u96e2\u7dda\u968e\u6bb5\u57f7\u884c\u51fd\u5f0f\u5256\u6790\uff0c\u4e26\u91dd\u5c0d\u6536\u96c6\u7684\u6307\u6a19\u8a13\u7df4\u4e00\u500b\u591a\u8f38\u51fa\u96a8\u6a5f\u68ee\u6797\u56de\u6b78\u6a21\u578b\uff0c\u4ee5\u547c\u53eb\u5177\u8f38\u5165\u611f\u77e5\u80fd\u529b\u7684\u6700\u4f73\u8a2d\u5b9a\u3002\u6211\u5011\u4f7f\u7528\u6700\u5148\u9032\u7684\u65b9\u6cd5\u5728 AWS Lambda \u670d\u52d9\u4e0a\u8a55\u4f30\u6211\u5011\u7684\u6210\u679c\uff0c\u767c\u73fe MemFigLess \u80fd\u5920\u64f7\u53d6\u5177\u8f38\u5165\u611f\u77e5\u80fd\u529b\u7684\u8cc7\u6e90\u95dc\u4fc2\uff0c\u4e26\u914d\u7f6e\u5c11\u9054 82% \u7684\u8cc7\u6e90\uff0c\u4e26\u7bc0\u7701\u9ad8\u9054 87% \u7684\u57f7\u884c\u6642\u9593\u6210\u672c\u3002", "author": "Siddharth Agarwal et.al.", "authors": "Siddharth Agarwal, Maria A. Rodriguez, Rajkumar Buyya", "id": "2411.07444v1", "paper_url": "http://arxiv.org/abs/2411.07444v1", "repo": "null"}}