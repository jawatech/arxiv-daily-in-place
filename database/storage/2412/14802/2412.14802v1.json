{"2412.14802": {"publish_time": "2024-12-19", "title": "Stack Trace Deduplication: Faster, More Accurately, and in More Realistic Scenarios", "paper_summary": "In large-scale software systems, there are often no fully-fledged bug reports\nwith human-written descriptions when an error occurs. In this case, developers\nrely on stack traces, i.e., series of function calls that led to the error.\nSince there can be tens and hundreds of thousands of them describing the same\nissue from different users, automatic deduplication into categories is\nnecessary to allow for processing. Recent works have proposed powerful deep\nlearning-based approaches for this, but they are evaluated and compared in\nisolation from real-life workflows, and it is not clear whether they will\nactually work well at scale.\n  To overcome this gap, this work presents three main contributions: a novel\nmodel, an industry-based dataset, and a multi-faceted evaluation. Our model\nconsists of two parts - (1) an embedding model with byte-pair encoding and\napproximate nearest neighbor search to quickly find the most relevant stack\ntraces to the incoming one, and (2) a reranker that re-ranks the most fitting\nstack traces, taking into account the repeated frames between them. To\ncomplement the existing datasets collected from open-source projects, we share\nwith the community SlowOps - a dataset of stack traces from IntelliJ-based\nproducts developed by JetBrains, which has an order of magnitude more stack\ntraces per category. Finally, we carry out an evaluation that strives to be\nrealistic: measuring not only the accuracy of categorization, but also the\noperation time and the ability to create new categories. The evaluation shows\nthat our model strikes a good balance - it outperforms other models on both\nopen-source datasets and SlowOps, while also being faster on time than most. We\nrelease all of our code and data, and hope that our work can pave the way to\nfurther practice-oriented research in the area.", "paper_summary_zh": "<paragraph>\u5728\u5927\u898f\u6a21\u8edf\u9ad4\u7cfb\u7d71\u4e2d\uff0c\u7576\u932f\u8aa4\u767c\u751f\u6642\uff0c\u901a\u5e38\u6c92\u6709\u5b8c\u6574\u7684\u4eba\u5de5\u64b0\u5beb\u63cf\u8ff0\u7684\u932f\u8aa4\u5831\u544a\u3002\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u958b\u767c\u4eba\u54e1\u4f9d\u8cf4\u5806\u758a\u8ffd\u8e64\uff0c\u4e5f\u5c31\u662f\u5c0e\u81f4\u932f\u8aa4\u7684\u4e00\u7cfb\u5217\u51fd\u5f0f\u547c\u53eb\u3002\u7531\u65bc\u53ef\u80fd\u6709\u6210\u5343\u4e0a\u842c\u500b\u5806\u758a\u8ffd\u8e64\u63cf\u8ff0\u4f86\u81ea\u4e0d\u540c\u4f7f\u7528\u8005\u7684\u76f8\u540c\u554f\u984c\uff0c\u56e0\u6b64\u5fc5\u9808\u81ea\u52d5\u5c07\u5176\u5206\u985e\u53bb\u91cd\uff0c\u624d\u80fd\u9032\u884c\u8655\u7406\u3002\u6700\u8fd1\u7684\u7814\u7a76\u63d0\u51fa\u5f37\u5927\u7684\u6df1\u5ea6\u5b78\u7fd2\u65b9\u6cd5\u4f86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u4f46\u9019\u4e9b\u65b9\u6cd5\u662f\u5728\u8207\u5be6\u969b\u5de5\u4f5c\u6d41\u7a0b\u9694\u96e2\u7684\u72c0\u614b\u4e0b\u9032\u884c\u8a55\u4f30\u548c\u6bd4\u8f03\uff0c\u56e0\u6b64\u4e0d\u6e05\u695a\u5b83\u5011\u662f\u5426\u771f\u7684\u80fd\u5728\u5927\u898f\u6a21\u60c5\u6cc1\u4e0b\u9806\u5229\u904b\u4f5c\u3002\n\u70ba\u4e86\u514b\u670d\u9019\u500b\u5dee\u8ddd\uff0c\u672c\u7814\u7a76\u63d0\u51fa\u4e86\u4e09\u9805\u4e3b\u8981\u8ca2\u737b\uff1a\u4e00\u500b\u65b0\u6a21\u578b\u3001\u4e00\u500b\u7522\u696d\u8cc7\u6599\u96c6\u548c\u4e00\u500b\u591a\u9762\u5411\u8a55\u4f30\u3002\u6211\u5011\u7684\u6a21\u578b\u5305\u542b\u5169\u500b\u90e8\u5206\uff1a(1) \u4e00\u500b\u4f7f\u7528\u4f4d\u5143\u7d44\u5c0d\u7de8\u78bc\u7684\u5d4c\u5165\u6a21\u578b\u548c\u8fd1\u4f3c\u6700\u8fd1\u9130\u641c\u5c0b\uff0c\u7528\u65bc\u5feb\u901f\u627e\u51fa\u8207\u8f38\u5165\u5806\u758a\u8ffd\u8e64\u6700\u76f8\u95dc\u7684\u5806\u758a\u8ffd\u8e64\uff0c\u4ee5\u53ca (2) \u4e00\u500b\u91cd\u65b0\u6392\u5e8f\u5668\uff0c\u7528\u65bc\u91cd\u65b0\u6392\u5e8f\u6700\u5408\u9069\u7684\u5806\u758a\u8ffd\u8e64\uff0c\u4e26\u8003\u91cf\u5b83\u5011\u4e4b\u9593\u91cd\u8907\u7684\u6846\u67b6\u3002\u70ba\u4e86\u88dc\u5145\u5f9e\u958b\u6e90\u5c08\u6848\u6536\u96c6\u7684\u73fe\u6709\u8cc7\u6599\u96c6\uff0c\u6211\u5011\u8207\u793e\u7fa4\u5206\u4eab SlowOps\uff0c\u9019\u662f\u4e00\u500b\u4f86\u81ea JetBrains \u958b\u767c\u7684 IntelliJ \u70ba\u57fa\u790e\u7522\u54c1\u7684\u5806\u758a\u8ffd\u8e64\u8cc7\u6599\u96c6\uff0c\u6bcf\u500b\u985e\u5225\u7684\u5806\u758a\u8ffd\u8e64\u6578\u91cf\u591a\u4e86\u4e00\u500b\u6578\u91cf\u7d1a\u3002\u6700\u5f8c\uff0c\u6211\u5011\u9032\u884c\u4e86\u4e00\u9805\u529b\u6c42\u52d9\u5be6\u7684\u8a55\u4f30\uff1a\u4e0d\u50c5\u8861\u91cf\u5206\u985e\u7684\u6e96\u78ba\u6027\uff0c\u9084\u8861\u91cf\u904b\u4f5c\u6642\u9593\u548c\u5efa\u7acb\u65b0\u985e\u5225\u7684\u80fd\u529b\u3002\u8a55\u4f30\u7d50\u679c\u986f\u793a\u6211\u5011\u7684\u6a21\u578b\u53d6\u5f97\u4e86\u826f\u597d\u7684\u5e73\u8861\uff0c\u5b83\u5728\u958b\u6e90\u8cc7\u6599\u96c6\u548c SlowOps \u4e0a\u90fd\u512a\u65bc\u5176\u4ed6\u6a21\u578b\uff0c\u540c\u6642\u901f\u5ea6\u4e5f\u6bd4\u5927\u591a\u6578\u6a21\u578b\u5feb\u3002\u6211\u5011\u91cb\u51fa\u4e86\u6240\u6709\u7a0b\u5f0f\u78bc\u548c\u8cc7\u6599\uff0c\u4e26\u5e0c\u671b\u6211\u5011\u7684\u7814\u7a76\u80fd\u70ba\u9019\u500b\u9818\u57df\u7684\u5be6\u52d9\u5c0e\u5411\u7814\u7a76\u92ea\u8def\u3002</paragraph>", "author": "Egor Shibaev et.al.", "authors": "Egor Shibaev, Denis Sushentsev, Yaroslav Golubev, Aleksandr Khvorov", "id": "2412.14802v1", "paper_url": "http://arxiv.org/abs/2412.14802v1", "repo": "https://github.com/jetbrains-research/stack-trace-deduplication"}}