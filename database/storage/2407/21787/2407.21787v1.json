{"2407.21787": {"publish_time": "2024-07-31", "title": "Large Language Monkeys: Scaling Inference Compute with Repeated Sampling", "paper_summary": "Scaling the amount of compute used to train language models has dramatically\nimproved their capabilities. However, when it comes to inference, we often\nlimit the amount of compute to only one attempt per problem. Here, we explore\ninference compute as another axis for scaling by increasing the number of\ngenerated samples. Across multiple tasks and models, we observe that coverage -\nthe fraction of problems solved by any attempt - scales with the number of\nsamples over four orders of magnitude. In domains like coding and formal\nproofs, where all answers can be automatically verified, these increases in\ncoverage directly translate into improved performance. When we apply repeated\nsampling to SWE-bench Lite, the fraction of issues solved with\nDeepSeek-V2-Coder-Instruct increases from 15.9% with one sample to 56% with 250\nsamples, outperforming the single-attempt state-of-the-art of 43% which uses\nmore capable frontier models. Moreover, using current API pricing, amplifying\nthe cheaper DeepSeek model with five samples is more cost-effective and solves\nmore issues than paying a premium for one sample from GPT-4o or Claude 3.5\nSonnet. Interestingly, the relationship between coverage and the number of\nsamples is often log-linear and can be modelled with an exponentiated power\nlaw, suggesting the existence of inference-time scaling laws. Finally, we find\nthat identifying correct samples out of many generations remains an important\ndirection for future research in domains without automatic verifiers. When\nsolving math word problems from GSM8K and MATH, coverage with Llama-3 models\ngrows to over 95% with 10,000 samples. However, common methods to pick correct\nsolutions from a sample collection, such as majority voting or reward models,\nplateau beyond several hundred samples and fail to fully scale with the sample\nbudget.", "paper_summary_zh": "<paragraph>\u64f4\u5927\u7528\u65bc\u8a13\u7df4\u8a9e\u8a00\u6a21\u578b\u7684\u904b\u7b97\u91cf\u5df2\u5927\u5e45\u63d0\u5347\u5176\u529f\u80fd\u3002\u7136\u800c\uff0c\u5728\u9032\u884c\u63a8\u8ad6\u6642\uff0c\u6211\u5011\u901a\u5e38\u5c07\u904b\u7b97\u91cf\u9650\u5236\u5728\u6bcf\u500b\u554f\u984c\u50c5\u5617\u8a66\u4e00\u6b21\u3002\u5728\u6b64\uff0c\u6211\u5011\u5c07\u63a8\u8ad6\u904b\u7b97\u8996\u70ba\u53e6\u4e00\u7a2e\u64f4\u5c55\u8ef8\uff0c\u85c9\u7531\u589e\u52a0\u751f\u6210\u7bc4\u4f8b\u7684\u6578\u91cf\u4f86\u9032\u884c\u64f4\u5c55\u3002\u5728\u591a\u500b\u4efb\u52d9\u548c\u6a21\u578b\u4e2d\uff0c\u6211\u5011\u89c0\u5bdf\u5230\u8986\u84cb\u7387\uff08\u4efb\u4f55\u5617\u8a66\u89e3\u6c7a\u554f\u984c\u7684\u5206\u6578\uff09\u6703\u96a8\u8457\u7bc4\u4f8b\u6578\u91cf\u800c\u64f4\u5c55\uff0c\u8d85\u904e\u56db\u500b\u6578\u91cf\u7d1a\u3002\u5728\u7de8\u78bc\u548c\u5f62\u5f0f\u5316\u8b49\u660e\u7b49\u9818\u57df\u4e2d\uff0c\u6240\u6709\u7b54\u6848\u90fd\u53ef\u4ee5\u81ea\u52d5\u9a57\u8b49\uff0c\u9019\u4e9b\u8986\u84cb\u7387\u7684\u589e\u52a0\u6703\u76f4\u63a5\u8f49\u5316\u70ba\u6548\u80fd\u7684\u63d0\u5347\u3002\u7576\u6211\u5011\u5c07\u91cd\u8907\u62bd\u6a23\u5957\u7528\u65bc SWE-bench Lite \u6642\uff0c\u4f7f\u7528 DeepSeek-V2-Coder-Instruct \u89e3\u6c7a\u554f\u984c\u7684\u5206\u6578\u5f9e\u4e00\u500b\u7bc4\u4f8b\u7684 15.9% \u63d0\u5347\u5230 250 \u500b\u7bc4\u4f8b\u7684 56%\uff0c\u512a\u65bc\u4f7f\u7528\u529f\u80fd\u66f4\u5f37\u5927\u7684\u524d\u6cbf\u6a21\u578b\u800c\u9054\u5230\u7684 43% \u55ae\u6b21\u5617\u8a66\u6700\u5148\u9032\u6c34\u6e96\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u76ee\u524d\u7684 API \u5b9a\u50f9\uff0c\u4ee5\u4e94\u500b\u7bc4\u4f8b\u64f4\u5145\u8f03\u4fbf\u5b9c\u7684 DeepSeek \u6a21\u578b\u6bd4\u652f\u4ed8\u6ea2\u50f9\u53d6\u5f97 GPT-4o \u6216 Claude 3.5 Sonnet \u7684\u4e00\u500b\u7bc4\u4f8b\u66f4\u5177\u6210\u672c\u6548\u76ca\uff0c\u4e14\u80fd\u89e3\u6c7a\u66f4\u591a\u554f\u984c\u3002\u6709\u8da3\u7684\u662f\uff0c\u8986\u84cb\u7387\u8207\u7bc4\u4f8b\u6578\u91cf\u4e4b\u9593\u7684\u95dc\u4fc2\u901a\u5e38\u662f\u5c0d\u6578\u7dda\u6027\u7684\uff0c\u4e14\u53ef\u7528\u6307\u6578\u51aa\u5f8b\u5efa\u6a21\uff0c\u9019\u8868\u793a\u5b58\u5728\u63a8\u8ad6\u6642\u9593\u64f4\u5c55\u5f8b\u3002\u6700\u5f8c\uff0c\u6211\u5011\u767c\u73fe\u5f9e\u8a31\u591a\u4e16\u4ee3\u4e2d\u627e\u51fa\u6b63\u78ba\u7bc4\u4f8b\u4ecd\u7136\u662f\u6c92\u6709\u81ea\u52d5\u9a57\u8b49\u5668\u7684\u9818\u57df\u4e2d\u672a\u4f86\u7814\u7a76\u7684\u91cd\u8981\u65b9\u5411\u3002\u5728\u89e3\u6c7a GSM8K \u548c MATH \u7684\u6578\u5b78\u6587\u5b57\u984c\u6642\uff0c\u4f7f\u7528 Llama-3 \u6a21\u578b\u7684\u8986\u84cb\u7387\u6703\u5728 10,000 \u500b\u7bc4\u4f8b\u4e2d\u6210\u9577\u5230\u8d85\u904e 95%\u3002\u7136\u800c\uff0c\u5f9e\u7bc4\u4f8b\u96c6\u5408\u4e2d\u6311\u9078\u6b63\u78ba\u89e3\u7b54\u7684\u5e38\u898b\u65b9\u6cd5\uff08\u4f8b\u5982\u591a\u6578\u6c7a\u6216\u734e\u52f5\u6a21\u578b\uff09\u6703\u5728\u6578\u767e\u500b\u7bc4\u4f8b\u5f8c\u9054\u5230\u5e73\u7a69\u671f\uff0c\u4e14\u7121\u6cd5\u5b8c\u5168\u96a8\u8457\u7bc4\u4f8b\u9810\u7b97\u800c\u64f4\u5c55\u3002</paragraph>", "author": "Bradley Brown et.al.", "authors": "Bradley Brown, Jordan Juravsky, Ryan Ehrlich, Ronald Clark, Quoc V. Le, Christopher R\u00e9, Azalia Mirhoseini", "id": "2407.21787v1", "paper_url": "http://arxiv.org/abs/2407.21787v1", "repo": "null"}}