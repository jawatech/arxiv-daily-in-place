{"2405.20092": {"publish_time": "2024-05-30", "title": "Divide-and-Conquer Meets Consensus: Unleashing the Power of Functions in Code Generation", "paper_summary": "Despite recent progress made by large language models in code generation,\nthey still struggle with programs that meet complex requirements. Recent work\nutilizes plan-and-solve decomposition to decrease the complexity and leverage\nself-tests to refine the generated program. Yet, planning deep-inside\nrequirements in advance can be challenging, and the tests need to be accurate\nto accomplish self-improvement. To this end, we propose FunCoder, a code\ngeneration framework incorporating the divide-and-conquer strategy with\nfunctional consensus. Specifically, FunCoder recursively branches off\nsub-functions as smaller goals during code generation, represented by a tree\nhierarchy. These sub-functions are then composited to attain more complex\nobjectives. Additionally, we designate functions via a consensus formed by\nidentifying similarities in program behavior, mitigating error propagation.\nFunCoder outperforms state-of-the-art methods by +9.8% on average in HumanEval,\nMBPP, xCodeEval and MATH with GPT-3.5 and GPT-4. Moreover, our method\ndemonstrates superiority on smaller models: With FunCoder, StableCode-3b\nsurpasses GPT-3.5 by +18.6% and achieves 97.7% of GPT-4's performance on\nHumanEval. Further analysis reveals that our proposed dynamic function\ndecomposition is capable of handling complex requirements, and the functional\nconsensus prevails over self-testing in correctness evaluation.", "paper_summary_zh": "\u5118\u7ba1\u5927\u578b\u8a9e\u8a00\u6a21\u578b\u5728\u7a0b\u5f0f\u78bc\u7522\u751f\u4e0a\u53d6\u5f97\u4e86\u8fd1\u671f\u7684\u9032\u5c55\uff0c\n\u5b83\u5011\u5728\u7b26\u5408\u8907\u96dc\u9700\u6c42\u7684\u7a0b\u5f0f\u4e0a\u4ecd\u6709\u56f0\u96e3\u3002\u6700\u8fd1\u7684\u7814\u7a76\n\u5229\u7528\u898f\u5283\u548c\u89e3\u6c7a\u5206\u89e3\u4f86\u964d\u4f4e\u8907\u96dc\u5ea6\uff0c\u4e26\u5229\u7528\u81ea\u6211\u6e2c\u8a66\u4f86\u6539\u5584\u7522\u751f\u7684\u7a0b\u5f0f\u3002\u7136\u800c\uff0c\u4e8b\u5148\u898f\u5283\u6df1\u5c64\u9700\u6c42\u53ef\u80fd\u5177\u6709\u6311\u6230\u6027\uff0c\u800c\u6e2c\u8a66\u9700\u8981\u6e96\u78ba\u624d\u80fd\u9054\u6210\u81ea\u6211\u6539\u5584\u3002\u70ba\u6b64\uff0c\u6211\u5011\u63d0\u51fa FunCoder\uff0c\u4e00\u500b\u5c07\u5206\u800c\u6cbb\u4e4b\u7b56\u7565\u8207\u51fd\u5f0f\u5171\u8b58\u7d50\u5408\u7684\u7a0b\u5f0f\u78bc\u7522\u751f\u67b6\u69cb\u3002\u5177\u9ad4\u4f86\u8aaa\uff0cFunCoder \u5728\u7a0b\u5f0f\u78bc\u7522\u751f\u671f\u9593\u905e\u8ff4\u5206\u652f\u51fa\u5b50\u51fd\u5f0f\u4f5c\u70ba\u8f03\u5c0f\u7684\u76ee\u6a19\uff0c\u4ee5\u6a39\u72c0\u7d50\u69cb\u8868\u793a\u3002\u7136\u5f8c\u5c07\u9019\u4e9b\u5b50\u51fd\u5f0f\u7d44\u5408\u8d77\u4f86\u4ee5\u9054\u6210\u66f4\u8907\u96dc\u7684\u76ee\u6a19\u3002\u6b64\u5916\uff0c\u6211\u5011\u900f\u904e\u627e\u51fa\u7a0b\u5f0f\u884c\u70ba\u7684\u76f8\u4f3c\u6027\u4f86\u5f62\u6210\u5171\u8b58\u4f86\u6307\u5b9a\u51fd\u5f0f\uff0c\u6e1b\u8f15\u932f\u8aa4\u50b3\u64ad\u3002FunCoder \u5728 HumanEval\u3001MBPP\u3001xCodeEval \u548c MATH \u4e2d\u6bd4\u63a1\u7528 GPT-3.5 \u548c GPT-4 \u7684\u6700\u5148\u9032\u65b9\u6cd5\u5e73\u5747\u9ad8\u51fa +9.8%\u3002\u6b64\u5916\uff0c\u6211\u5011\u7684\u6a21\u578b\u5728\u8f03\u5c0f\u7684\u6a21\u578b\u4e0a\u5c55\u73fe\u51fa\u512a\u8d8a\u6027\uff1a\u900f\u904e FunCoder\uff0cStableCode-3b \u8d85\u8d8a GPT-3.5 \u9054 +18.6%\uff0c\u4e26\u5728 HumanEval \u4e0a\u9054\u5230 GPT-4 \u6548\u80fd\u7684 97.7%\u3002\u9032\u4e00\u6b65\u7684\u5206\u6790\u986f\u793a\uff0c\u6211\u5011\u63d0\u51fa\u7684\u52d5\u614b\u51fd\u5f0f\u5206\u89e3\u80fd\u5920\u8655\u7406\u8907\u96dc\u7684\u9700\u6c42\uff0c\u800c\u51fd\u5f0f\u5171\u8b58\u5728\u6b63\u78ba\u6027\u8a55\u4f30\u4e2d\u512a\u65bc\u81ea\u6211\u6e2c\u8a66\u3002", "author": "Jingchang Chen et.al.", "authors": "Jingchang Chen, Hongxuan Tang, Zheng Chu, Qianglong Chen, Zekun Wang, Ming Liu, Bing Qin", "id": "2405.20092v1", "paper_url": "http://arxiv.org/abs/2405.20092v1", "repo": "null"}}