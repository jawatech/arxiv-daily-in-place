{"2409.06446": {"publish_time": "2024-09-10", "title": "HexaCoder: Secure Code Generation via Oracle-Guided Synthetic Training Data", "paper_summary": "Large language models (LLMs) have shown great potential for automatic code\ngeneration and form the basis for various tools such as GitHub Copilot.\nHowever, recent studies highlight that many LLM-generated code contains serious\nsecurity vulnerabilities. While previous work tries to address this by training\nmodels that generate secure code, these attempts remain constrained by limited\naccess to training data and labor-intensive data preparation.\n  In this paper, we introduce HexaCoder, a novel approach to enhance the\nability of LLMs to generate secure codes by automatically synthesizing secure\ncodes, which reduces the effort of finding suitable training data. HexaCoder\ncomprises two key components: an oracle-guided data synthesis pipeline and a\ntwo-step process for secure code generation. The data synthesis pipeline\ngenerates pairs of vulnerable and fixed codes for specific Common Weakness\nEnumeration (CWE) types by utilizing a state-of-the-art LLM for repairing\nvulnerable code. A security oracle identifies vulnerabilities, and a\nstate-of-the-art LLM repairs them by extending and/or editing the codes,\ncreating data pairs for fine-tuning using the Low-Rank Adaptation (LoRA)\nmethod. Each example of our fine-tuning dataset includes the necessary\nsecurity-related libraries and code that form the basis of our novel two-step\ngeneration approach. This allows the model to integrate security-relevant\nlibraries before generating the main code, significantly reducing the number of\ngenerated vulnerable codes by up to 85% compared to the baseline methods. We\nperform extensive evaluations on three different benchmarks for four LLMs,\ndemonstrating that HexaCoder not only improves the security of the generated\ncode but also maintains a high level of functional correctness.", "paper_summary_zh": "\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u5728\u81ea\u52d5\u7a0b\u5f0f\u78bc\u751f\u6210\u65b9\u9762\u5c55\u73fe\u4e86\u5de8\u5927\u7684\u6f5b\u529b\uff0c\u4e26\u6210\u70ba\u5404\u7a2e\u5de5\u5177\u7684\u57fa\u790e\uff0c\u4f8b\u5982 GitHub Copilot\u3002\u7136\u800c\uff0c\u6700\u8fd1\u7684\u7814\u7a76\u5f37\u8abf\uff0c\u8a31\u591a LLM \u751f\u6210\u7684\u7a0b\u5f0f\u78bc\u5305\u542b\u56b4\u91cd\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u96d6\u7136\u5148\u524d\u7684\u7814\u7a76\u5617\u8a66\u900f\u904e\u8a13\u7df4\u7522\u751f\u5b89\u5168\u7a0b\u5f0f\u78bc\u7684\u6a21\u578b\u4f86\u89e3\u6c7a\u6b64\u554f\u984c\uff0c\u4f46\u9019\u4e9b\u5617\u8a66\u4ecd\u53d7\u5230\u8a13\u7df4\u8cc7\u6599\u53d6\u5f97\u53d7\u9650\u548c\u8cc7\u6599\u6e96\u5099\u5de5\u4f5c\u7e41\u91cd\u7684\u9650\u5236\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5011\u4ecb\u7d39 HexaCoder\uff0c\u9019\u662f\u4e00\u7a2e\u900f\u904e\u81ea\u52d5\u5408\u6210\u5b89\u5168\u7a0b\u5f0f\u78bc\u4f86\u589e\u5f37 LLM \u7522\u751f\u5b89\u5168\u7a0b\u5f0f\u78bc\u80fd\u529b\u7684\u65b0\u65b9\u6cd5\uff0c\u5b83\u6e1b\u5c11\u4e86\u5c0b\u627e\u5408\u9069\u8a13\u7df4\u8cc7\u6599\u7684\u7cbe\u529b\u3002HexaCoder \u5305\u542b\u5169\u500b\u95dc\u9375\u7d44\u6210\u90e8\u5206\uff1a\u4e00\u500b\u7531 Oracle \u5f15\u5c0e\u7684\u8cc7\u6599\u5408\u6210\u7ba1\u7dda\uff0c\u4ee5\u53ca\u4e00\u500b\u7528\u65bc\u7522\u751f\u5b89\u5168\u7a0b\u5f0f\u78bc\u7684\u5169\u6b65\u9a5f\u7a0b\u5e8f\u3002\u8cc7\u6599\u5408\u6210\u7ba1\u7dda\u900f\u904e\u5229\u7528\u6700\u5148\u9032\u7684 LLM \u4f86\u4fee\u5fa9\u6709\u6f0f\u6d1e\u7684\u7a0b\u5f0f\u78bc\uff0c\u70ba\u7279\u5b9a\u5e38\u898b\u5f31\u9ede\u5217\u8209 (CWE) \u985e\u578b\u7522\u751f\u6709\u6f0f\u6d1e\u548c\u5df2\u4fee\u5fa9\u7a0b\u5f0f\u78bc\u7684\u914d\u5c0d\u3002\u5b89\u5168 Oracle \u6703\u8b58\u5225\u6f0f\u6d1e\uff0c\u800c\u6700\u5148\u9032\u7684 LLM \u6703\u900f\u904e\u5ef6\u4f38\u548c/\u6216\u7de8\u8f2f\u7a0b\u5f0f\u78bc\u4f86\u4fee\u5fa9\u9019\u4e9b\u6f0f\u6d1e\uff0c\u4e26\u5efa\u7acb\u8cc7\u6599\u914d\u5c0d\uff0c\u4ee5\u4f7f\u7528\u4f4e\u79e9\u9069\u61c9 (LoRA) \u65b9\u6cd5\u9032\u884c\u5fae\u8abf\u3002\u6211\u5011\u7684\u5fae\u8abf\u8cc7\u6599\u96c6\u7684\u6bcf\u500b\u7bc4\u4f8b\u90fd\u5305\u542b\u5fc5\u8981\u7684\u5b89\u5168\u76f8\u95dc\u51fd\u5f0f\u5eab\u548c\u7a0b\u5f0f\u78bc\uff0c\u9019\u4e9b\u7a0b\u5f0f\u78bc\u69cb\u6210\u6211\u5011\u65b0\u7a4e\u5169\u6b65\u9a5f\u751f\u6210\u65b9\u6cd5\u7684\u57fa\u790e\u3002\u9019\u5141\u8a31\u6a21\u578b\u5728\u7522\u751f\u4e3b\u7a0b\u5f0f\u78bc\u4e4b\u524d\u6574\u5408\u8207\u5b89\u5168\u76f8\u95dc\u7684\u51fd\u5f0f\u5eab\uff0c\u8207\u57fa\u7dda\u65b9\u6cd5\u76f8\u6bd4\uff0c\u53ef\u986f\u8457\u6e1b\u5c11\u591a\u9054 85% \u7684\u6709\u6f0f\u6d1e\u7a0b\u5f0f\u78bc\u6578\u91cf\u3002\u6211\u5011\u91dd\u5c0d\u56db\u500b LLM \u7684\u4e09\u500b\u4e0d\u540c\u57fa\u6e96\u9032\u884c\u5ee3\u6cdb\u8a55\u4f30\uff0c\u8b49\u660e HexaCoder \u4e0d\u50c5\u63d0\u9ad8\u4e86\u6240\u7522\u751f\u7a0b\u5f0f\u78bc\u7684\u5b89\u5168\u6027\uff0c\u9084\u7dad\u6301\u4e86\u9ad8\u6c34\u6e96\u7684\u529f\u80fd\u6b63\u78ba\u6027\u3002", "author": "Hossein Hajipour et.al.", "authors": "Hossein Hajipour, Lea Sch\u00f6nherr, Thorsten Holz, Mario Fritz", "id": "2409.06446v1", "paper_url": "http://arxiv.org/abs/2409.06446v1", "repo": "null"}}