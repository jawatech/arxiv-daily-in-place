{"2501.16191": {"publish_time": "2025-01-27", "title": "Raiders of the Lost Dependency: Fixing Dependency Conflicts in Python using LLMs", "paper_summary": "Fixing Python dependency issues is a tedious and error-prone task for\ndevelopers, who must manually identify and resolve environment dependencies and\nversion constraints of third-party modules and Python interpreters. Researchers\nhave attempted to automate this process by relying on large knowledge graphs\nand database lookup tables. However, these traditional approaches face\nlimitations due to the variety of dependency error types, large sets of\npossible module versions, and conflicts among transitive dependencies. This\nstudy explores the potential of using large language models (LLMs) to\nautomatically fix dependency issues in Python programs. We introduce PLLM\n(pronounced \"plum\"), a novel technique that employs retrieval-augmented\ngeneration (RAG) to help an LLM infer Python versions and required modules for\na given Python file. PLLM builds a testing environment that iteratively (1)\nprompts the LLM for module combinations, (2) tests the suggested changes, and\n(3) provides feedback (error messages) to the LLM to refine the fix. This\nfeedback cycle leverages natural language processing (NLP) to intelligently\nparse and interpret build error messages. We benchmark PLLM on the Gistable\nHG2.9K dataset, a collection of challenging single-file Python gists. We\ncompare PLLM against two state-of-the-art automatic dependency inference\napproaches, namely PyEGo and ReadPyE, w.r.t. the ability to resolve dependency\nissues. Our results indicate that PLLM can fix more dependency issues than the\ntwo baselines, with +218 (+15.97%) more fixes over ReadPyE and +281 (+21.58%)\nover PyEGo. Our deeper analyses suggest that PLLM is particularly beneficial\nfor projects with many dependencies and for specific third-party numerical and\nmachine-learning modules. Our findings demonstrate the potential of LLM-based\napproaches to iteratively resolve Python dependency issues.", "paper_summary_zh": "<paragraph>\u4fee\u5fa9 Python \u4f9d\u8cf4\u9805\u554f\u984c\u5c0d\u958b\u767c\u4eba\u54e1\u4f86\u8aaa\u662f\u4e00\u9805\u7e41\u7463\u4e14\u5bb9\u6613\u51fa\u932f\u7684\u4efb\u52d9\uff0c\u4ed6\u5011\u5fc5\u9808\u624b\u52d5\u8b58\u5225\u548c\u89e3\u6c7a\u7b2c\u4e09\u65b9\u6a21\u7d44\u548c Python \u89e3\u8b6f\u5668\u7684\u74b0\u5883\u4f9d\u8cf4\u9805\u548c\u7248\u672c\u9650\u5236\u3002\u7814\u7a76\u4eba\u54e1\u5df2\u5617\u8a66\u900f\u904e\u4f9d\u8cf4\u5927\u578b\u77e5\u8b58\u5716\u8b5c\u548c\u8cc7\u6599\u5eab\u67e5\u8a62\u8868\u4f86\u81ea\u52d5\u5316\u6b64\u7a0b\u5e8f\u3002\u7136\u800c\uff0c\u9019\u4e9b\u50b3\u7d71\u65b9\u6cd5\u7531\u65bc\u4f9d\u8cf4\u9805\u932f\u8aa4\u985e\u578b\u591a\u6a23\u3001\u53ef\u80fd\u7684\u6a21\u7d44\u7248\u672c\u6578\u91cf\u9f90\u5927\uff0c\u4ee5\u53ca\u50b3\u905e\u4f9d\u8cf4\u9805\u4e4b\u9593\u7684\u885d\u7a81\uff0c\u800c\u9762\u81e8\u9650\u5236\u3002\u672c\u7814\u7a76\u63a2\u8a0e\u4f7f\u7528\u5927\u578b\u8a9e\u8a00\u6a21\u578b (LLM) \u81ea\u52d5\u4fee\u5fa9 Python \u7a0b\u5f0f\u4e2d\u7684\u4f9d\u8cf4\u9805\u554f\u984c\u7684\u53ef\u80fd\u6027\u3002\u6211\u5011\u4ecb\u7d39 PLLM\uff08\u767c\u97f3\u70ba\u300cplum\u300d\uff09\uff0c\u9019\u662f\u4e00\u7a2e\u65b0\u7a4e\u7684\u6280\u8853\uff0c\u63a1\u7528\u6aa2\u7d22\u589e\u5f37\u751f\u6210 (RAG) \u4f86\u5354\u52a9 LLM \u63a8\u8ad6 Python \u7248\u672c\u548c\u7d66\u5b9a Python \u6a94\u6848\u6240\u9700\u7684\u6a21\u7d44\u3002PLLM \u5efa\u7acb\u4e00\u500b\u6e2c\u8a66\u74b0\u5883\uff0c\u53cd\u8986 (1) \u63d0\u793a LLM \u6a21\u7d44\u7d44\u5408\uff0c(2) \u6e2c\u8a66\u5efa\u8b70\u7684\u8b8a\u66f4\uff0c\u4ee5\u53ca (3) \u63d0\u4f9b\u56de\u994b\uff08\u932f\u8aa4\u8a0a\u606f\uff09\u7d66 LLM \u4ee5\u6539\u5584\u4fee\u6b63\u3002\u6b64\u56de\u994b\u5faa\u74b0\u5229\u7528\u81ea\u7136\u8a9e\u8a00\u8655\u7406 (NLP) \u4f86\u667a\u6167\u89e3\u6790\u548c\u8a6e\u91cb\u5efa\u7f6e\u932f\u8aa4\u8a0a\u606f\u3002\u6211\u5011\u5728 Gistable HG2.9K \u8cc7\u6599\u96c6\u4e0a\u5c0d PLLM \u9032\u884c\u57fa\u6e96\u6e2c\u8a66\uff0c\u8a72\u8cc7\u6599\u96c6\u662f\u4e00\u500b\u5177\u6709\u6311\u6230\u6027\u7684\u55ae\u4e00\u6a94\u6848 Python gist \u96c6\u5408\u3002\u6211\u5011\u5c07 PLLM \u8207\u5169\u7a2e\u6700\u5148\u9032\u7684\u81ea\u52d5\u4f9d\u8cf4\u9805\u63a8\u8ad6\u65b9\u6cd5\u9032\u884c\u6bd4\u8f03\uff0c\u5373 PyEGo \u548c ReadPyE\uff0c\u4ee5\u6bd4\u8f03\u89e3\u6c7a\u4f9d\u8cf4\u9805\u554f\u984c\u7684\u80fd\u529b\u3002\u6211\u5011\u7684\u7d50\u679c\u986f\u793a\uff0cPLLM \u53ef\u4ee5\u4fee\u5fa9\u6bd4\u9019\u5169\u500b\u57fa\u6e96\u66f4\u591a\u7684\u4f9d\u8cf4\u9805\u554f\u984c\uff0c\u6bd4 ReadPyE \u591a\u4fee\u5fa9\u4e86 +218 (+15.97%) \u500b\uff0c\u6bd4 PyEGo \u591a\u4fee\u5fa9\u4e86 +281 (+21.58%) \u500b\u3002\u6211\u5011\u66f4\u6df1\u5165\u7684\u5206\u6790\u8868\u660e\uff0cPLLM \u5c0d\u5177\u6709\u8a31\u591a\u4f9d\u8cf4\u9805\u7684\u5c08\u6848\u4ee5\u53ca\u7279\u5b9a\u7b2c\u4e09\u65b9\u6578\u503c\u548c\u6a5f\u5668\u5b78\u7fd2\u6a21\u7d44\u7279\u5225\u6709\u76ca\u3002\u6211\u5011\u7684\u7814\u7a76\u7d50\u679c\u8b49\u660e\u4e86\u57fa\u65bc LLM \u7684\u65b9\u6cd5\u53cd\u8986\u89e3\u6c7a Python \u4f9d\u8cf4\u9805\u554f\u984c\u7684\u53ef\u80fd\u6027\u3002</paragraph>", "author": "Antony Bartlett et.al.", "authors": "Antony Bartlett, Cynthia Liem, Annibale Panichella", "id": "2501.16191v1", "paper_url": "http://arxiv.org/abs/2501.16191v1", "repo": "null"}}