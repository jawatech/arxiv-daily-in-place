{"2405.19074": {"publish_time": "2024-05-29", "title": "Resurrecting Old Classes with New Data for Exemplar-Free Continual Learning", "paper_summary": "Continual learning methods are known to suffer from catastrophic forgetting,\na phenomenon that is particularly hard to counter for methods that do not store\nexemplars of previous tasks. Therefore, to reduce potential drift in the\nfeature extractor, existing exemplar-free methods are typically evaluated in\nsettings where the first task is significantly larger than subsequent tasks.\nTheir performance drops drastically in more challenging settings starting with\na smaller first task. To address this problem of feature drift estimation for\nexemplar-free methods, we propose to adversarially perturb the current samples\nsuch that their embeddings are close to the old class prototypes in the old\nmodel embedding space. We then estimate the drift in the embedding space from\nthe old to the new model using the perturbed images and compensate the\nprototypes accordingly. We exploit the fact that adversarial samples are\ntransferable from the old to the new feature space in a continual learning\nsetting. The generation of these images is simple and computationally cheap. We\ndemonstrate in our experiments that the proposed approach better tracks the\nmovement of prototypes in embedding space and outperforms existing methods on\nseveral standard continual learning benchmarks as well as on fine-grained\ndatasets. Code is available at https://github.com/dipamgoswami/ADC.", "paper_summary_zh": "\u6301\u7e8c\u5b78\u7fd2\u65b9\u6cd5\u5df2\u77e5\u6703\u906d\u53d7\u707d\u96e3\u6027\u907a\u5fd8\uff0c\n\u9019\u662f\u4e00\u500b\u7279\u5225\u96e3\u4ee5\u5c0d\u6297\u7684\u73fe\u8c61\uff0c\u5c0d\u65bc\u4e0d\u5132\u5b58\u5148\u524d\u4efb\u52d9\u7bc4\u4f8b\u7684\u65b9\u6cd5\u800c\u8a00\u66f4\u662f\u5982\u6b64\u3002\u56e0\u6b64\uff0c\u70ba\u4e86\u6e1b\u5c11\u7279\u5fb5\u8403\u53d6\u5668\u4e2d\u7684\u6f5b\u5728\u504f\u79fb\uff0c\u73fe\u6709\u7684\u7121\u7bc4\u4f8b\u65b9\u6cd5\u901a\u5e38\u5728\u7b2c\u4e00\u500b\u4efb\u52d9\u986f\u8457\u5927\u65bc\u5f8c\u7e8c\u4efb\u52d9\u7684\u8a2d\u5b9a\u4e2d\u9032\u884c\u8a55\u4f30\u3002\u4ed6\u5011\u7684\u8868\u73fe\u6703\u5728\u5f9e\u8f03\u5c0f\u7684\u7b2c\u4e00\u500b\u4efb\u52d9\u958b\u59cb\u7684\u66f4\u5177\u6311\u6230\u6027\u7684\u8a2d\u5b9a\u4e2d\u6025\u5287\u4e0b\u964d\u3002\u70ba\u4e86\u89e3\u6c7a\u7121\u7bc4\u4f8b\u65b9\u6cd5\u7684\u7279\u5fb5\u504f\u79fb\u4f30\u8a08\u554f\u984c\uff0c\u6211\u5011\u5efa\u8b70\u5c0d\u7576\u524d\u6a23\u672c\u9032\u884c\u5c0d\u6297\u6027\u64fe\u52d5\uff0c\u4f7f\u5176\u5d4c\u5165\u8207\u820a\u6a21\u578b\u5d4c\u5165\u7a7a\u9593\u4e2d\u7684\u820a\u985e\u5225\u539f\u578b\u76f8\u8fd1\u3002\u7136\u5f8c\uff0c\u6211\u5011\u4f7f\u7528\u64fe\u52d5\u7684\u5f71\u50cf\u5f9e\u820a\u6a21\u578b\u4f30\u8a08\u5230\u65b0\u6a21\u578b\u7684\u5d4c\u5165\u7a7a\u9593\u4e2d\u7684\u504f\u79fb\uff0c\u4e26\u76f8\u61c9\u5730\u88dc\u511f\u539f\u578b\u3002\u6211\u5011\u5229\u7528\u5c0d\u6297\u6a23\u672c\u5728\u6301\u7e8c\u5b78\u7fd2\u8a2d\u5b9a\u4e2d\u53ef\u4ee5\u5f9e\u820a\u7279\u5fb5\u7a7a\u9593\u50b3\u8f38\u5230\u65b0\u7279\u5fb5\u7a7a\u9593\u7684\u4e8b\u5be6\u3002\u9019\u4e9b\u5f71\u50cf\u7684\u751f\u6210\u7c21\u55ae\u4e14\u8a08\u7b97\u6210\u672c\u4f4e\u5ec9\u3002\u6211\u5011\u5728\u5be6\u9a57\u4e2d\u8b49\u660e\uff0c\u6240\u63d0\u51fa\u7684\u65b9\u6cd5\u53ef\u4ee5\u66f4\u597d\u5730\u8ffd\u8e64\u5d4c\u5165\u7a7a\u9593\u4e2d\u539f\u578b\u7684\u79fb\u52d5\uff0c\u4e26\u5728\u591a\u500b\u6a19\u6e96\u6301\u7e8c\u5b78\u7fd2\u57fa\u6e96\u4ee5\u53ca\u7d30\u7c92\u5ea6\u8cc7\u6599\u96c6\u4e0a\u512a\u65bc\u73fe\u6709\u65b9\u6cd5\u3002\u7a0b\u5f0f\u78bc\u53ef\u5728 https://github.com/dipamgoswami/ADC \u53d6\u5f97\u3002", "author": "Dipam Goswami et.al.", "authors": "Dipam Goswami, Albin Soutif--Cormerais, Yuyang Liu, Sandesh Kamath, Bart\u0142omiej Twardowski, Joost van de Weijer", "id": "2405.19074v1", "paper_url": "http://arxiv.org/abs/2405.19074v1", "repo": "https://github.com/dipamgoswami/adc"}}