{"2411.08182": {"publish_time": "2024-11-12", "title": "SCORE: Syntactic Code Representations for Static Script Malware Detection", "paper_summary": "As businesses increasingly adopt cloud technologies, they also need to be\naware of new security challenges, such as server-side script attacks, to ensure\nthe integrity of their systems and data. These scripts can steal data,\ncompromise credentials, and disrupt operations. Unlike executables with\nstandardized formats (e.g., ELF, PE), scripts are plaintext files with diverse\nsyntax, making them harder to detect using traditional methods. As a result,\nmore sophisticated approaches are needed to protect cloud infrastructures from\nthese evolving threats. In this paper, we propose novel feature extraction and\ndeep learning (DL)-based approaches for static script malware detection,\ntargeting server-side threats. We extract features from plain-text code using\ntwo techniques: syntactic code highlighting (SCH) and abstract syntax tree\n(AST) construction. SCH leverages complex regexes to parse syntactic elements\nof code, such as keywords, variable names, etc. ASTs generate a hierarchical\nrepresentation of a program's syntactic structure. We then propose a sequential\nand a graph-based model that exploits these feature representations to detect\nscript malware. We evaluate our approach on more than 400K server-side scripts\nin Bash, Python and Perl. We use a balanced dataset of 90K scripts for\ntraining, validation, and testing, with the remaining from 400K reserved for\nfurther analysis. Experiments show that our method achieves a true positive\nrate (TPR) up to 81% higher than leading signature-based antivirus solutions,\nwhile maintaining a low false positive rate (FPR) of 0.17%. Moreover, our\napproach outperforms various neural network-based detectors, demonstrating its\neffectiveness in learning code maliciousness for accurate detection of script\nmalware.", "paper_summary_zh": "<paragraph>\u96a8\u8457\u4f01\u696d\u65e5\u76ca\u63a1\u7528\u96f2\u7aef\u6280\u8853\uff0c\u4ed6\u5011\u4e5f\u9700\u8981\u610f\u8b58\u5230\u65b0\u7684\u5b89\u5168\u6311\u6230\uff0c\u4f8b\u5982\u4f3a\u670d\u5668\u7aef\u8173\u672c\u653b\u64ca\uff0c\u4ee5\u78ba\u4fdd\u5176\u7cfb\u7d71\u548c\u8cc7\u6599\u7684\u5b8c\u6574\u6027\u3002\u9019\u4e9b\u8173\u672c\u53ef\u4ee5\u7aca\u53d6\u8cc7\u6599\u3001\u5371\u5bb3\u6191\u8b49\u4e26\u4e2d\u65b7\u4f5c\u696d\u3002\u8207\u5177\u6709\u6a19\u6e96\u5316\u683c\u5f0f\u7684\u53ef\u57f7\u884c\u6a94\uff08\u4f8b\u5982 ELF\u3001PE\uff09\u4e0d\u540c\uff0c\u8173\u672c\u662f\u5177\u6709\u4e0d\u540c\u8a9e\u6cd5\u7684\u7d14\u6587\u5b57\u6a94\u6848\uff0c\u9019\u4f7f\u5f97\u5b83\u5011\u66f4\u96e3\u4f7f\u7528\u50b3\u7d71\u65b9\u6cd5\u9032\u884c\u5075\u6e2c\u3002\u56e0\u6b64\uff0c\u9700\u8981\u66f4\u7cbe\u5bc6\u7684\u6280\u8853\u4f86\u4fdd\u8b77\u96f2\u7aef\u57fa\u790e\u8a2d\u65bd\u514d\u65bc\u9019\u4e9b\u4e0d\u65b7\u6f14\u8b8a\u7684\u5a01\u8105\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5011\u63d0\u51fa\u65b0\u7a4e\u7684\u7279\u5fb5\u8403\u53d6\u548c\u57fa\u65bc\u6df1\u5ea6\u5b78\u7fd2 (DL) \u7684\u65b9\u6cd5\uff0c\u7528\u65bc\u975c\u614b\u8173\u672c\u60e1\u610f\u8edf\u9ad4\u5075\u6e2c\uff0c\u9396\u5b9a\u4f3a\u670d\u5668\u7aef\u5a01\u8105\u3002\u6211\u5011\u4f7f\u7528\u5169\u7a2e\u6280\u8853\u5f9e\u7d14\u6587\u5b57\u7a0b\u5f0f\u78bc\u4e2d\u8403\u53d6\u7279\u5fb5\uff1a\u8a9e\u6cd5\u7a0b\u5f0f\u78bc\u7a81\u986f (SCH) \u548c\u62bd\u8c61\u8a9e\u6cd5\u6a39 (AST) \u5efa\u69cb\u3002SCH \u5229\u7528\u8907\u96dc\u7684\u6b63\u898f\u8868\u793a\u5f0f\u4f86\u89e3\u6790\u7a0b\u5f0f\u78bc\u7684\u8a9e\u6cd5\u5143\u7d20\uff0c\u4f8b\u5982\u95dc\u9375\u5b57\u3001\u8b8a\u6578\u540d\u7a31\u7b49\u3002AST \u7522\u751f\u7a0b\u5f0f\u7684\u8a9e\u6cd5\u7d50\u69cb\u7684\u968e\u5c64\u5f0f\u8868\u793a\u3002\u7136\u5f8c\uff0c\u6211\u5011\u63d0\u51fa\u4e00\u500b\u5e8f\u5217\u548c\u4e00\u500b\u57fa\u65bc\u5716\u5f62\u7684\u6a21\u578b\uff0c\u5229\u7528\u9019\u4e9b\u7279\u5fb5\u8868\u793a\u4f86\u5075\u6e2c\u8173\u672c\u60e1\u610f\u8edf\u9ad4\u3002\u6211\u5011\u91dd\u5c0d\u8d85\u904e 40 \u842c\u500b Bash\u3001Python \u548c Perl \u4e2d\u7684\u4f3a\u670d\u5668\u7aef\u8173\u672c\u8a55\u4f30\u6211\u5011\u7684\u6280\u8853\u3002\u6211\u5011\u4f7f\u7528\u4e00\u500b\u5e73\u8861\u7684 9 \u842c\u500b\u8173\u672c\u8cc7\u6599\u96c6\u9032\u884c\u8a13\u7df4\u3001\u9a57\u8b49\u548c\u6e2c\u8a66\uff0c\u5176\u9918 40 \u842c\u500b\u4fdd\u7559\u4f5c\u9032\u4e00\u6b65\u5206\u6790\u3002\u5be6\u9a57\u8868\u660e\uff0c\u6211\u5011\u7684\u6280\u8853\u6bd4\u9818\u5148\u7684\u57fa\u65bc\u7c3d\u7ae0\u7684\u9632\u6bd2\u8edf\u9ad4\u89e3\u6c7a\u65b9\u6848\u9ad8\u51fa 81% \u7684\u771f\u6b63\u967d\u6027\u7387 (TPR)\uff0c\u540c\u6642\u5c07\u8aa4\u5831\u7387 (FPR) \u7dad\u6301\u5728 0.17% \u7684\u4f4e\u6c34\u6e96\u3002\u6b64\u5916\uff0c\u6211\u5011\u7684\u6280\u8853\u512a\u65bc\u5404\u7a2e\u57fa\u65bc\u795e\u7d93\u7db2\u8def\u7684\u5075\u6e2c\u5668\uff0c\u8b49\u660e\u5176\u5728\u5b78\u7fd2\u7a0b\u5f0f\u78bc\u60e1\u610f\u6027\u4ee5\u6e96\u78ba\u5075\u6e2c\u8173\u672c\u60e1\u610f\u8edf\u9ad4\u65b9\u9762\u7684\u6709\u6548\u6027\u3002</paragraph>", "author": "Ecenaz Erdemir et.al.", "authors": "Ecenaz Erdemir, Kyuhong Park, Michael J. Morais, Vianne R. Gao, Marion Marschalek, Yi Fan", "id": "2411.08182v1", "paper_url": "http://arxiv.org/abs/2411.08182v1", "repo": "null"}}